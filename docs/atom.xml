<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>isekiのNote</title>
  
  
  <link href="https://blog.iseki.space/atom.xml" rel="self"/>
  
  <link href="https://blog.iseki.space/"/>
  <updated>2020-09-06T10:00:31.776Z</updated>
  <id>https://blog.iseki.space/</id>
  
  <author>
    <name>iseki</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>判断多边形内点</title>
    <link href="https://blog.iseki.space/2020/09/06/point-in-polygon/"/>
    <id>https://blog.iseki.space/2020/09/06/point-in-polygon/</id>
    <published>2020-09-06T09:59:00.000Z</published>
    <updated>2020-09-06T10:00:31.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="判断多边形内点"><a href="#判断多边形内点" class="headerlink" title="判断多边形内点"></a>判断多边形内点</h1><blockquote><p>本文节选翻译自：<a href="http://geomalgorithms.com/a03-_inclusion.html">http://geomalgorithms.com/a03-_inclusion.html</a> ，部分图片重绘，文字亦加入了一些个人理解</p></blockquote><p>有两种算法，圈绕数(Winding Number)和交叉数(Crossing Number)</p><ul><li>Crossing Number: 点P画一条射线，计算其与多边形边界交叉数，当交叉数是奇数时，点在内部；</li><li>Winding Number: 计算多边形绕过点P的次数，只有圈绕数为0时点在内部</li></ul><p>如果一个多边形是简单的（无自交），两种方法对所有的点给出相同结果。但是对于一些复杂多变性，两种方法可能对一些点给出不同的结果，比如：当一个多边形叠加自身之上时，对于重叠区域的点，如果使用wn，则被认为是在多边形之外的，而cn则不是。见下图：</p><p><img src= "/img/loading.gif" data-lazy-src="./cn0.svg" alt="Crossing Number"><img src= "/img/loading.gif" data-lazy-src="./wn0.svg" alt="Winding Number"></p><p>在这个例子中，重叠区域的点 圈绕数 wn = 2，暗示着它被环绕在多边形中两次。明显，wn给出的答案更加直观。</p><p>尽管如此，cn还是被使用得更加广泛，这是因为cn被错误的认为比wn更快（20倍）[O’Rourke, 1998]<br>但事实并非如此，通过带符号的计数，wn可以获得与cn同等的效率。事实上，我们的实现的 <code>wn_PnPoly()</code> 比[Franklin, 2000], [ Haines, 1994] 和 [O’Rourke, 1998]给出的cn更快！尽管[Moller &amp; Haines, 1999]实现的 <code>PointInPolygon()</code> 与我们的wn是差不多的，但综合考虑正确性和性能，wn是应该被首先推荐的。</p><h2 id="交叉法-The-Crossing-Number"><a href="#交叉法-The-Crossing-Number" class="headerlink" title="交叉法(The Crossing Number)"></a>交叉法(The Crossing Number)</h2><p>这个算法通过计算由点P发出的射线跨越多边形边界的次数来决定点在内部还是外部。点是奇数则在内部，反之则在外部，这非常容易理解，见下图：</p><p><img src= "/img/loading.gif" data-lazy-src="./cn1.svg"></p><p>在实现 cn 法时，必须遵守的一点是只统计影响“进入”和“离开”多边形的交叉。特别是，穿过顶点的情况必须被正确处理，存在如下几种交叉：</p><p><img src= "/img/loading.gif" data-lazy-src="./cn2.svg"></p><p>此外，必须决定当一个点处于边界线上时，这个点是在多边形的内部还是外部。依照惯例，我们认为在左下边的点在内部，而右上边的点在外部。这是因为，如果不同的两个多边形共享一条边，点将只出现在其一内部，而不会同时出现在两个多边形内部，这样做避免了很多潜在的问题。</p><p>一个朴素的 Crossing Number 算法实现是，点P向X轴的正方向延伸出一条与X轴平行的射线，使用这条特别的射线可以容易地计算其与多边形边的交叉，甚至当不可能存在交叉时，判断更加容易。要计算总的交叉数 $cn$ ，算法简单地枚举多边形的所有边并测试射线与之的交叉，并在交叉时改变 $cn$ 。特别的，交叉测试必须正确处理点在边上和其他特殊情况，遵守如下规则：</p><h3 id="边交叉规则-Edge-Crossing-Rules"><a href="#边交叉规则-Edge-Crossing-Rules" class="headerlink" title="边交叉规则(Edge Crossing Rules)"></a>边交叉规则(Edge Crossing Rules)</h3><ol><li>向上的边只包含起始点而不包含结束点</li><li>向下的边只包含结束点而不包含起始点</li><li>排除水平边</li><li>交点必须严格的出现在点P的右侧</li></ol><p>可以使用这些规则计算交叉，要注意第 4 条规则导致处在右侧边缘的点被认为是在多边形的外部，而左侧边缘上的点被认为是内部。</p><h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">typedef struct &#123;int x, y;&#125; Point;</span><br><span class="line"></span><br><span class="line">cn_PnPoly( Point P, Point V[], int n )</span><br><span class="line">&#123;</span><br><span class="line">    int    cn &#x3D; 0;    &#x2F;&#x2F; the  crossing number counter</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; loop through all edges of the polygon</span><br><span class="line">    for (each edge E[i]:V[i]V[i+1] of the polygon) &#123;</span><br><span class="line">        if (E[i] crosses upward ala Rule #1</span><br><span class="line">         || E[i] crosses downward ala  Rule #2) &#123;</span><br><span class="line">            if (P.x &lt;  x_intersect of E[i] with y&#x3D;P.y)   &#x2F;&#x2F; Rule #4</span><br><span class="line">                 ++cn;   &#x2F;&#x2F; a valid crossing to the right of P.x</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return (cn&amp;1);    &#x2F;&#x2F; 0 if even (out), and 1 if  odd (in)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，这个验证交叉的方式基于<a href="https://zh.wikipedia.org/wiki/%E8%8B%A5%E5%B0%94%E5%BD%93%E6%9B%B2%E7%BA%BF%E5%AE%9A%E7%90%86" title="若尔当曲线定理 (Jordan curve theorem)">若尔当曲线定理</a>，简单来说图形必须没有自交。</p><p><em>待续~</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;判断多边形内点&quot;&gt;&lt;a href=&quot;#判断多边形内点&quot; class=&quot;headerlink&quot; title=&quot;判断多边形内点&quot;&gt;&lt;/a&gt;判断多边形内点&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本文节选翻译自：&lt;a href=&quot;http://geomalgorithm</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>浅扯 Coroutine</title>
    <link href="https://blog.iseki.space/2020/07/20/some-of-coroutine-suspend-function/"/>
    <id>https://blog.iseki.space/2020/07/20/some-of-coroutine-suspend-function/</id>
    <published>2020-07-20T11:30:00.000Z</published>
    <updated>2020-07-20T11:29:52.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅扯-Coroutine"><a href="#浅扯-Coroutine" class="headerlink" title="浅扯 Coroutine"></a>浅扯 Coroutine</h1><p>关于 Kotlin Coroutine 的使用就不多说了，大家都已经很熟悉emmm，这里简单探索下 Coroutine 内部的实现，来尽量规避Coroutine 与其他库和框架协同使用时的坑。</p><p>本文编写时使用 Kotlin 版本：<code>1.4-M3</code>，JDK 版本：<code>openjdk 11.0.7</code></p><p>Coroutine 的核心原理 <a href="https://github.com/Kotlin/KEEP" title="Kotlin Evolution and Enhancement Process">KEEP</a> 中的 coroutine 提案已经写得很清楚了，详见提案的实现详情章节： <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/coroutines.md#implementation-details">KEEP/proposals/coroutines.md#implementation-details</a> ，这里补充一点点提案中没说的，和实现高度相关的内容。</p><p>本质就是对 suspend 函数进行CPS变换，将代码转换为<a href="https://en.wikipedia.org/wiki/Continuation-passing_style" title="[CPS] 延续体传递风格（WikiPedia[英文]）">延续体传递风格</a>。简单来说就是为每个函数增加了一个隐式的参数 <code>$completion</code>，它的类型是 <code>Continuation</code> 即延续体；函数本体则被编译成状态机，状态存储于上述的 <code>Continuation</code> 中，suspend 函数每次 resume 时都会被调用，其根据 <code>Continuation</code> 中的状态信息直接调转到对应的位置继续执行。</p><p>为了便于分析，这里使用 <a href="https://www.benf.org/other/cfr/" title="CFR - another java decompiler">CFR</a> 反编译器对 kotlinc 编译的 suspend 函数进行反编译，当前版本为 <code>0.150</code></p><p>我们从下面代码段开始：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">demo1</span><span class="params">(s: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;1==========&quot;</span>)</span><br><span class="line">        delay(<span class="number">100</span>)</span><br><span class="line">        println(<span class="string">&quot;2==========&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，Kotlin 编译器对其进行编译后我们看到两个 class <code>Demo$demo1$1.class</code> <code>Demo.class</code> 前面那个是后面的匿名内部类，不用管它，用 cfr 反编译后面的就行了。以下我将只节选部分源码，注意这不是标准的Java代码，没法直接编译</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Unable to fully structure code</span></span><br><span class="line"><span class="comment">     * Enabled aggressive block sorting</span></span><br><span class="line"><span class="comment">     * Lifted jumps to return sites</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">demo1</span><span class="params">(<span class="meta">@NotNull</span> String s, <span class="meta">@NotNull</span> Continuation&lt;? <span class="keyword">super</span> Unit&gt; $completion)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!($completion <span class="keyword">instanceof</span> demo1.<span class="number">1</span>)) ** GOTO lbl-<span class="number">1000</span></span><br><span class="line">            <span class="comment">// 这个 demo1.1 就是下面new出来的那个ContinuationImpl</span></span><br><span class="line">        var6_3 = $completion;</span><br><span class="line">        <span class="keyword">if</span> ((var6_3.label &amp; -<span class="number">2147483648</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            var6_3.label -= -<span class="number">2147483648</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> lbl-<span class="number">1000</span>:</span><br><span class="line">        <span class="comment">// 2 sources</span></span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            $continuation = <span class="keyword">new</span> ContinuationImpl(<span class="keyword">this</span>, $completion)&#123;</span><br><span class="line">                <span class="comment">/* synthetic */</span> Object result;</span><br><span class="line">                <span class="keyword">int</span> label;</span><br><span class="line">                <span class="keyword">final</span> <span class="comment">/* synthetic */</span> Demo <span class="keyword">this</span>$<span class="number">0</span>;</span><br><span class="line">                Object L$<span class="number">0</span>;</span><br><span class="line">                Object L$<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Nullable</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">invokeSuspend</span><span class="params">(<span class="meta">@NotNull</span> Object $result)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">this</span>.result = $result;</span><br><span class="line">                    <span class="keyword">this</span>.label |= Integer.MIN_VALUE;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.<span class="keyword">this</span>$<span class="number">0.d</span>emo1(<span class="keyword">null</span>, (Continuation&lt;? <span class="keyword">super</span> Unit&gt;)<span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>.<span class="keyword">this</span>$<span class="number">0</span> = demo;</span><br><span class="line">                    <span class="keyword">super</span>(continuation);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        $result = $continuation.result;</span><br><span class="line">        var7_5 = IntrinsicsKt.getCOROUTINE_SUSPENDED();</span><br><span class="line">        <span class="keyword">switch</span> ($continuation.label) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">                ResultKt.throwOnFailure((Object)$result);</span><br><span class="line">                var3_6 = <span class="string">&quot;1==========&quot;</span>;</span><br><span class="line">                var4_7 = <span class="keyword">false</span>;</span><br><span class="line">                System.out.println((Object)var3_6);</span><br><span class="line">                $continuation.L$<span class="number">0</span> = <span class="keyword">this</span>;</span><br><span class="line">                $continuation.L$<span class="number">1</span> = s;</span><br><span class="line">                $continuation.label = <span class="number">1</span>;</span><br><span class="line">                v0 = DelayKt.delay((<span class="keyword">long</span>)<span class="number">100L</span>, (Continuation)$continuation);</span><br><span class="line">                <span class="keyword">if</span> (v0 == var7_5) &#123; <span class="comment">// if result == COROUTINE_SUSPENDED</span></span><br><span class="line">                    <span class="keyword">return</span> var7_5;  <span class="comment">//     return COROUTINE_SUSPEND</span></span><br><span class="line">                &#125;</span><br><span class="line">                ** GOTO lbl27       <span class="comment">// else goto lbl27</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                <span class="comment">// 状态机在这里 resume，先恢复局部变量</span></span><br><span class="line">                s = (String)$continuation.L$<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">this</span> = (Demo)$continuation.L$<span class="number">0</span>;</span><br><span class="line">                ResultKt.throwOnFailure((Object)$result);</span><br><span class="line">                v0 = $result;</span><br><span class="line">lbl27:</span><br><span class="line">                <span class="comment">// 2 sources</span></span><br><span class="line">                <span class="comment">// 如果一开始就没有挂起，那自然也就不需要恢复咯</span></span><br><span class="line">                var3_6 = <span class="string">&quot;2==========&quot;</span>;</span><br><span class="line">                var4_7 = <span class="keyword">false</span>;</span><br><span class="line">                System.out.println((Object)var3_6);</span><br><span class="line">                <span class="keyword">return</span> Unit.INSTANCE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;call to &#x27;resume&#x27; before &#x27;invoke&#x27; with coroutine&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个很清晰了，这个 suspend 真正被调用时会创建一个 ContinuationImpl 的子类，里边存放了状态机的状态 <code>label</code> 和局部变量，还有最关键的，传进来的调用者的延续体也被包含在了里面，这个稍后会用到。</p><p>当协程挂起时，状态机函数会返回 <code>COROUTINE_SUSPEND</code> 这个对象，这也就是 suspend 函数编译后函数返回值必然为 Any 的原因，实际的返回值是 返回值 T 和 COROUTINE_SUSPEND 之一，显然这是在 Java 和 Kotlin 类型系统中均无法表达的。局部变量等状态信息，都会在调用下一个 suspend 函数前保存进延续体 (45~47) </p><p> 接下来看一看 CoroutineImpl 这个类到底干了什么，这个类的代码很多，我不全粘过来了，只节选有意义的部分</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">resumeWith</span><span class="params">(result: <span class="type">Result</span>&lt;<span class="type">Any</span>?&gt;)</span></span> &#123;</span><br><span class="line">        <span class="comment">// This loop unrolls recursion in current.resumeWith(param) to make saner and shorter stack traces on resume</span></span><br><span class="line">        <span class="keyword">var</span> current = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">var</span> param = result</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// Invoke &quot;resume&quot; debug probe on every resumed continuation, so that a debugging library infrastructure</span></span><br><span class="line">            <span class="comment">// can precisely track what part of suspended callstack was already resumed</span></span><br><span class="line">            probeCoroutineResumed(current)</span><br><span class="line">            with(current) &#123;</span><br><span class="line">                <span class="keyword">val</span> completion = completion!! <span class="comment">// fail fast when trying to resume continuation without completion</span></span><br><span class="line">                <span class="keyword">val</span> outcome: Result&lt;Any?&gt; =</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">val</span> outcome = invokeSuspend(param)</span><br><span class="line">                        <span class="keyword">if</span> (outcome === COROUTINE_SUSPENDED) <span class="keyword">return</span></span><br><span class="line">                        Result.success(outcome)</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (exception: Throwable) &#123;</span><br><span class="line">                        Result.failure(exception)</span><br><span class="line">                    &#125;</span><br><span class="line">                releaseIntercepted() <span class="comment">// this state machine instance is terminating</span></span><br><span class="line">                <span class="keyword">if</span> (completion <span class="keyword">is</span> BaseContinuationImpl) &#123;</span><br><span class="line">                    <span class="comment">// unrolling recursion via loop</span></span><br><span class="line">                    current = completion</span><br><span class="line">                    param = outcome</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// top-level completion reached -- invoke and return</span></span><br><span class="line">                    completion.resumeWith(outcome)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其实这个函数做的事很简单，不停的循环并调用 current 指针的 invokeSuspend 函数来恢复协程的执行，如果返回 COROUTINE_SUSPEND 那就意味着又是暂停，返回；否则说明当前函数执行完了，从 current 指针指向的延续体中拿出它上一级的延续体，继续 invoke，直到回到根，结束退出。</p><p>总结下，传入每个 suspend 函数的延续体在初始时都是调用者的延续体，当 resume 时会传入本函数的延续体，并根据里边的 label 去往相应的状态，同时协程暂停时会返回那个特殊的 COROUTINE_SUSPEND 对象。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浅扯-Coroutine&quot;&gt;&lt;a href=&quot;#浅扯-Coroutine&quot; class=&quot;headerlink&quot; title=&quot;浅扯 Coroutine&quot;&gt;&lt;/a&gt;浅扯 Coroutine&lt;/h1&gt;&lt;p&gt;关于 Kotlin Coroutine 的使用就不多说了，大</summary>
      
    
    
    
    
    <category term="kotlin" scheme="https://blog.iseki.space/tags/kotlin/"/>
    
    <category term="coroutine" scheme="https://blog.iseki.space/tags/coroutine/"/>
    
  </entry>
  
  <entry>
    <title>在 Windows 上使用 OpenPGP 签署 Git 提交的一点点注意事项</title>
    <link href="https://blog.iseki.space/2020/06/11/use-pgp-with-git-on-windows/"/>
    <id>https://blog.iseki.space/2020/06/11/use-pgp-with-git-on-windows/</id>
    <published>2020-06-10T16:00:00.000Z</published>
    <updated>2020-06-25T13:57:09.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在-Windows-上使用-OpenPGP-签署-Git-提交的一点点注意事项"><a href="#在-Windows-上使用-OpenPGP-签署-Git-提交的一点点注意事项" class="headerlink" title="在 Windows 上使用 OpenPGP 签署 Git 提交的一点点注意事项"></a>在 Windows 上使用 OpenPGP 签署 Git 提交的一点点注意事项</h1><p>可能和 Git for Windows 在安装时的选项有关，需要注意默认情况下 git 可能不会使用 Windows 中安装的 gpg.exe，这必然会导致找不到key。（要不是因为看到了gpg的初始化输出我打死也想不到是这个问题）</p><p><code>git config --global gpg.program &quot;c:/Program Files (x86)/GnuPG/bin/gpg.exe&quot;</code> 即可，注意看准了自己机器上的路径是啥。</p><p>另 <code>git config commit.gpgsign true</code> 即可设置该仓库默认签名提交，IDEA里 commit 时就会弹出 Git for windows 的密钥窗口了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在-Windows-上使用-OpenPGP-签署-Git-提交的一点点注意事项&quot;&gt;&lt;a href=&quot;#在-Windows-上使用-OpenPGP-签署-Git-提交的一点点注意事项&quot; class=&quot;headerlink&quot; title=&quot;在 Windows 上使用 </summary>
      
    
    
    
    
    <category term="pgp" scheme="https://blog.iseki.space/tags/pgp/"/>
    
    <category term="git" scheme="https://blog.iseki.space/tags/git/"/>
    
    <category term="window" scheme="https://blog.iseki.space/tags/window/"/>
    
  </entry>
  
  <entry>
    <title>解决 CLion + MSVC 下的字符编码问题</title>
    <link href="https://blog.iseki.space/2020/05/31/charset-clion-msvc/"/>
    <id>https://blog.iseki.space/2020/05/31/charset-clion-msvc/</id>
    <published>2020-05-31T13:00:00.000Z</published>
    <updated>2020-06-25T13:57:09.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决-CLion-MSVC-下的字符编码问题"><a href="#解决-CLion-MSVC-下的字符编码问题" class="headerlink" title="解决 CLion + MSVC 下的字符编码问题"></a>解决 CLion + MSVC 下的字符编码问题</h1><p>第一次这么用，上来字符编码就炸了，不出意外 log 中会出现如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失</span><br></pre></td></tr></table></figure><p>然后就是诡异的编译失败语法错误，比如换行符、分号等等</p><p>原因是 CLion 默认使用 UTF-8 编码，MSVC 继承了 MS 家族的一贯传统，除非明确指定否则要么 UTF-8 with BOM 要么当前代码页。</p><p>解决办法也简单，加上命令行开关就行了： <code>\utf-8</code> 或者 <code>source-charset:utf-8 /execution-charset:utf-8</code> <a href="https://docs.microsoft.com/en-us/cpp/build/reference/utf-8-set-source-and-executable-character-sets-to-utf-8">参见MSVC文档&gt;&gt;</a></p><p>默认创建的项目是 CMake 的，在 <code>CMakeList.txt</code> 中加入如下内容即可</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_compile_options</span>(<span class="string">&quot;$&lt;$&lt;C_COMPILER_ID:MSVC&gt;:/utf-8&gt;&quot;</span>)</span><br><span class="line"><span class="keyword">add_compile_options</span>(<span class="string">&quot;$&lt;$&lt;CXX_COMPILER_ID:MSVC&gt;:/utf-8&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><p>括号中表达式语法具体参见 <a href="https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#manual:cmake-generator-expressions(7)">cmake-generator-expressions(7)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;解决-CLion-MSVC-下的字符编码问题&quot;&gt;&lt;a href=&quot;#解决-CLion-MSVC-下的字符编码问题&quot; class=&quot;headerlink&quot; title=&quot;解决 CLion + MSVC 下的字符编码问题&quot;&gt;&lt;/a&gt;解决 CLion + MSVC 下的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>iseki根本不会写blog呢</title>
    <link href="https://blog.iseki.space/2020/04/21/awsl/"/>
    <id>https://blog.iseki.space/2020/04/21/awsl/</id>
    <published>2020-04-21T15:33:10.000Z</published>
    <updated>2020-06-25T13:57:09.820Z</updated>
    
    <content type="html"><![CDATA[<p>iseki 哪里会写博客呢…连什么是博客都说不清楚…只能时不时发发牢骚了…人逐渐的婆婆妈妈…愈发变得无聊…</p><p>再看看前面的路…不知该干什么，也不知该走向何方呢。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;iseki 哪里会写博客呢…连什么是博客都说不清楚…只能时不时发发牢骚了…人逐渐的婆婆妈妈…愈发变得无聊…&lt;/p&gt;
&lt;p&gt;再看看前面的路…不知该干什么，也不知该走向何方呢。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>在 Gradle 里写 Codegen 为 Kotlin 的每个类生成 xxxOf()</title>
    <link href="https://blog.iseki.space/2020/04/12/write-codegen-in-gradle/"/>
    <id>https://blog.iseki.space/2020/04/12/write-codegen-in-gradle/</id>
    <published>2020-04-12T13:09:42.000Z</published>
    <updated>2020-06-25T13:57:09.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在-Gradle-里写-Codegen-为-Kotlin-的每个类生成-xxxOf"><a href="#在-Gradle-里写-Codegen-为-Kotlin-的每个类生成-xxxOf" class="headerlink" title="在 Gradle 里写 Codegen 为 Kotlin 的每个类生成 xxxOf()"></a>在 Gradle 里写 Codegen 为 Kotlin 的每个类生成 xxxOf()</h1><p>这两天也不知道咋回事，和 codegen 杠上了，也未必节省多少时间，复杂的 codegen 写起来挺累的······ 上次在 Vert.x 里看到了 <code>classnameOf(params...)</code> 这种写法，例如 <code>httpOptionsOf(port = 8080,...)</code> 顿时感觉非常舒服，决定也给自己的代码加上。</p><p>codegen 的方案无非就这几种：</p><ol><li>独立的一个生成器，用起来麻烦，不能很舒服的自动化，但是写起来简单啊（x</li><li>利用 Java 的 APT 注解处理器，缺点是首先只能支持 Java，Kotlin/JVM 虽然有 KAPT 可以用，但并不舒服，而且有暗坑；其次最关键的是这东西是完全在编译时生成代码，一般的设计方式都不会保留编译时生成的源码文件。这意味着 IDE 的提示会爆炸，一般的解决方案是再写一个 IDE 插件······</li><li>编译器插件······ 这个，虽然解决了注解处理器仅支持 JVM 的问题，但依旧不能解决 IDE 提示的问题，而且工作量会爆炸······</li><li>独立的 codegen，利用 gradle 的 task，在恰当的时候触发，同时生成的代码包含在项目的源集中，不用写 IDE 插件了（</li></ol><p>当然，可以粗暴的开一个子模块单独编译单独运行，但是实在是太臃肿且没必要了</p><p>参考下 Gradle 的官方文档，插件的存在主要有两种形式，一种是最简单的，直接一个 <code>*.gradle(.kts)?</code> 文件；另一种是正经的插件，官方的说法是 Binary Plugin，后者能提供更强大的能力，前者充其量就是个脚本。<br>平时使用的插件基本都是二进制插件，如 <code>java</code> <code>kotlin全家桶</code> <code>maven-*</code> 等等，</p><p>就写一个临时用的 codegen 实在没必要花费太大精力研究 Gradle 的官方文档，那么就从一个简单的文件写起。</p><p>最简单的办法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">println(&quot;Hello world&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply(from &#x3D; &quot;codegen.gradle.kts&quot;)</span><br></pre></td></tr></table></figure><p>不出意外，每次执行 <code>gradlew</code> 时都能看到控制台中打出的 Hello world。那么其实剩下的事情就很简单了。（感觉最困难的是完全不熟悉的 Gradle 😥</p><p>需要做的东西并不多，Kotlin 的文法文件有现成的，用 antlr 生成下就可以用了。这里用的是来自 antlr 官方仓库的文件：<a href="https://github.com/antlr/grammars-v4/tree/master/kotlin/kotlin-formal">https://github.com/antlr/grammars-v4/tree/master/kotlin/kotlin-formal</a></p><p>把它丢进 <code>buildSrc/src/main/[java|kotlin|groovy]</code> 然后就可以在合适的 <code>gradle.kts</code> 文件中使用了。当然如果觉得这不够好，也可以在完全独立的项目中构建一个 jar，把他包含进 <code>buildscript&#123;&#125;</code> 就像那些插件一样。</p><p>待续······</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在-Gradle-里写-Codegen-为-Kotlin-的每个类生成-xxxOf&quot;&gt;&lt;a href=&quot;#在-Gradle-里写-Codegen-为-Kotlin-的每个类生成-xxxOf&quot; class=&quot;headerlink&quot; title=&quot;在 Gradle 里</summary>
      
    
    
    
    
    <category term="gradle" scheme="https://blog.iseki.space/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 里执行 Jar 的几种办法</title>
    <link href="https://blog.iseki.space/2020/04/11/gradle-execute-jar/"/>
    <id>https://blog.iseki.space/2020/04/11/gradle-execute-jar/</id>
    <published>2020-04-11T12:44:00.000Z</published>
    <updated>2020-06-25T13:57:09.821Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Gradle 这个东西真是让人头大······ 这里权当留个笔记备忘了，改日要好好学习下 Gradle</p></blockquote><p>之前只用过 <code>application</code> 插件，结果用了 Kotlin MPP 后那个插件似乎失效了，虽然应该有办法通过手动配置继续使用那个插件，但是考虑到自己完全不熟悉 Gradle 还是不多折腾了···</p><p>以下内容来自 StackOverflow……</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tasks.create(<span class="string">&quot;execute&quot;</span>) &#123;</span><br><span class="line">    dependsOn(tasks.getByName(<span class="string">&quot;jvmJar&quot;</span>))</span><br><span class="line">    doLast &#123;</span><br><span class="line">        javaexec &#123;</span><br><span class="line">            <span class="keyword">this</span>.main = <span class="string">&quot;-jar&quot;</span></span><br><span class="line">            <span class="keyword">val</span> file = File(buildDir.absolutePath + <span class="string">&quot;/libs/project-jvm-0.0.1.jar&quot;</span>)</span><br><span class="line">            println(<span class="string">&quot;Execute Jar: &quot;</span> + file.absolutePath)</span><br><span class="line">            <span class="keyword">this</span>.args(file.absolutePath)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要注意的是要写好 <code>manifest</code> 的 <code>Main-Class</code> 还要依赖的问题，最粗暴的办法无非就是打包成 Fat-Jar (x</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Gradle 这个东西真是让人头大······ 这里权当留个笔记备忘了，改日要好好学习下 Gradle&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前只用过 &lt;code&gt;application&lt;/code&gt; 插件，结果用了 Kotlin MPP 后</summary>
      
    
    
    
    
    <category term="gradle" scheme="https://blog.iseki.space/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>第一次使用 Kotlin MPP</title>
    <link href="https://blog.iseki.space/2020/04/11/kotlin-mpp-first/"/>
    <id>https://blog.iseki.space/2020/04/11/kotlin-mpp-first/</id>
    <published>2020-04-11T06:18:15.000Z</published>
    <updated>2020-06-25T13:57:09.822Z</updated>
    
    <content type="html"><![CDATA[<p>Kotlin 多平台也推出了好一阵子了，却一直没用过，今天第一次用，官方文档不多，记录下遇到的坑。</p><blockquote><p>本文 Kotlin Multiplatform Gradle 插件版本 <strong>1.3.71</strong></p></blockquote><h2 id="Gradle-配置"><a href="#Gradle-配置" class="headerlink" title="Gradle 配置"></a>Gradle 配置</h2><p>不知道是不是我漏掉了什么开关，idea 默认生成的项目 gradle 是 <code>build.gradle</code> 而不是 <code>build.gradle.kts</code> 。一看到陌生的语法就难受，决定手动改成 Kotlin DSL。有关 DSL 的语法在这里<a href="https://www.kotlincn.net/docs/reference/building-mpp-with-gradle.html">可以</a>找到。</p><p>注意如果项目同时存在 Java 代码，要开启 <code>withJava</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kotlin&#123;</span><br><span class="line">    jvm &#123; withJava() &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JVM-Jar-的注意事项"><a href="#JVM-Jar-的注意事项" class="headerlink" title="JVM-Jar 的注意事项"></a>JVM-Jar 的注意事项</h2><p>默认给出的 jar 的 <code>manifest</code> 文件中并不包含 <code>Main-Class</code> 项目，需要写进 gradle ：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">kotlin&#123;</span><br><span class="line">    tasks.withType(Jar::<span class="class"><span class="keyword">class</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.manifest&#123;</span><br><span class="line">            attributes[<span class="string">&quot;Main-Class&quot;</span>] = <span class="string">&quot;MainKt&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 加入下面动作后会生成 Fat-Jar</span></span><br><span class="line">        doFirst&#123;</span><br><span class="line">            from(configurations[<span class="string">&quot;runtimeClasspath&quot;</span>].files</span><br><span class="line">            .filter &#123; it.name.endsWith(<span class="string">&quot;jar&quot;</span>) &#125;.map &#123; zipTree(it) &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>待续······</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Kotlin 多平台也推出了好一阵子了，却一直没用过，今天第一次用，官方文档不多，记录下遇到的坑。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文 Kotlin Multiplatform Gradle 插件版本 &lt;strong&gt;1.3.71&lt;/strong&gt;&lt;/p&gt;
&lt;/b</summary>
      
    
    
    
    
    <category term="kotlin" scheme="https://blog.iseki.space/tags/kotlin/"/>
    
    <category term="gradle" scheme="https://blog.iseki.space/tags/gradle/"/>
    
    <category term="kotlin-mpp" scheme="https://blog.iseki.space/tags/kotlin-mpp/"/>
    
  </entry>
  
  <entry>
    <title>使用 gradle 构建 Kotlin React 应用</title>
    <link href="https://blog.iseki.space/2020/01/10/about-kotlinjs-react/"/>
    <id>https://blog.iseki.space/2020/01/10/about-kotlinjs-react/</id>
    <published>2020-01-09T16:13:14.000Z</published>
    <updated>2020-06-25T13:57:09.818Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-gradle-构建-Kotlin-React-应用"><a href="#使用-gradle-构建-Kotlin-React-应用" class="headerlink" title="使用 gradle 构建 Kotlin React 应用"></a>使用 gradle 构建 Kotlin React 应用</h1><p>之前 JetBrain 官方提供了一个 <code>create-react-kotlin-app</code> 工具，这个东西可用来创建可使用 npm 构建的应用…现在社区似乎又打了一层包，切换到 gradle 了，但看起来底层还是极大的依赖 npm… （毕竟那一坨库还是要用的）…</p><p>似乎官方相关的文档还没有出来，那么这里就整理一点自己搜集到的东西。</p><h3 id="关于-build-gradle-kts"><a href="#关于-build-gradle-kts" class="headerlink" title="关于 build.gradle.kts"></a>关于 build.gradle.kts</h3><p>要引入的插件和依赖倒是不多(?)：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    <span class="comment">// 这里的版本最好和下方统一</span></span><br><span class="line">    id(<span class="string">&quot;org.jetbrains.kotlin.js&quot;</span>) version <span class="string">&quot;1.3.60&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation(kotlin(<span class="string">&quot;stdlib-js&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="React-相关依赖"><a href="#React-相关依赖" class="headerlink" title="React 相关依赖"></a>React 相关依赖</h3><p>要注意 npm 依赖不能在顶层的 dependencies 里引用，而是：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kotlin &#123;</span><br><span class="line">    sourceSets[<span class="string">&quot;main&quot;</span>].dependencies &#123;</span><br><span class="line">        <span class="comment">// 一定要引入 React 的一系列依赖</span></span><br><span class="line">        implementation(npm(<span class="string">&quot;react&quot;</span>, <span class="string">&quot;16.9.0&quot;</span>))</span><br><span class="line">        implementation(npm(<span class="string">&quot;react-dom&quot;</span>, <span class="string">&quot;16.9.0&quot;</span>))</span><br><span class="line">        implementation(npm(<span class="string">&quot;core-js&quot;</span>, <span class="string">&quot;3.4.8&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Maven 版的 Kotlin-React-Wrapper 依赖:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">&quot;org.jetbrains:kotlin-react:16.9.0-pre.89-kotlin-1.3.60&quot;</span>)</span><br><span class="line">implementation(<span class="string">&quot;org.jetbrains:kotlin-react-dom:16.9.0-pre.89-kotlin-1.3.60&quot;</span>)</span><br></pre></td></tr></table></figure><p>以上依赖并未发布在中央仓库，所以一定引入</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven(<span class="string">&quot;https://dl.bintray.com/kotlin/kotlin-eap/&quot;</span>)</span><br><span class="line">    maven(<span class="string">&quot;https://dl.bintray.com/kotlin/kotlin-js-wrappers/&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可在如下地址找到版本信息等：</p><ul><li><a href="https://www.npmjs.com/package/@jetbrains/kotlin-react">https://www.npmjs.com/package/@jetbrains/kotlin-react</a></li><li><a href="https://www.npmjs.com/package/@jetbrains/kotlin-react-dom">https://www.npmjs.com/package/@jetbrains/kotlin-react-dom</a></li></ul><p>可使用 <code>gradlew run / gradlew browserRun</code> 拉起开发服务， <code>gradlew browserWebpack</code> 开始生产构建</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用-gradle-构建-Kotlin-React-应用&quot;&gt;&lt;a href=&quot;#使用-gradle-构建-Kotlin-React-应用&quot; class=&quot;headerlink&quot; title=&quot;使用 gradle 构建 Kotlin React 应用&quot;&gt;&lt;/a&gt;使用</summary>
      
    
    
    
    
    <category term="kotlin" scheme="https://blog.iseki.space/tags/kotlin/"/>
    
    <category term="react" scheme="https://blog.iseki.space/tags/react/"/>
    
    <category term="kotlin-js" scheme="https://blog.iseki.space/tags/kotlin-js/"/>
    
    <category term="js" scheme="https://blog.iseki.space/tags/js/"/>
    
    <category term="gradle" scheme="https://blog.iseki.space/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>使用 Gradle Shadow 插件生成 Fat-Jar</title>
    <link href="https://blog.iseki.space/2019/12/08/use-shadow-gradle-plugin-gen-fatjar/"/>
    <id>https://blog.iseki.space/2019/12/08/use-shadow-gradle-plugin-gen-fatjar/</id>
    <published>2019-12-08T10:27:59.000Z</published>
    <updated>2020-06-25T13:57:09.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-Gradle-Shadow-插件生成-Fat-Jar"><a href="#使用-Gradle-Shadow-插件生成-Fat-Jar" class="headerlink" title="使用 Gradle Shadow 插件生成 Fat-Jar"></a>使用 Gradle Shadow 插件生成 Fat-Jar</h1><p>在网络上找了好一阵子，最终发现了 <a href="https://github.com/johnrengelman/shadow">Gradle Shadow</a> 这个插件，用起来很方便：</p><p>首先需要修改 gradle 的 <code>buildscript</code> 来引入这个依赖，这个东西 IDEA 默认生成的 Kotlin 项目没有，自己加进去:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        <span class="comment">// 这里目前的版本号是 5.2.0 ，对应 Gradle 版本 5.x ，较低的版本可能无法使用</span></span><br><span class="line">        classpath(<span class="string">&quot;com.github.jengelman.gradle.plugins:shadow:5.2.0&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 <code>plugins</code> 中加入这个插件就行了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins&#123;</span><br><span class="line">    id(<span class="string">&quot;com.github.johnrengelman.shadow&quot;</span>) version <span class="string">&quot;5.2.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了避免生成的 fat-jar 的 <code>META-INF/MANIFEST.MF</code> 中缺少 <code>Main-Class</code> 项，导致无法直接启动，建议在 <code>plugins</code> 中加入 <code>application</code>，并配置好相关属性 :</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins&#123;</span><br><span class="line">    application</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">application &#123;</span><br><span class="line">    mainClassName = <span class="string">&quot;yours.MainKt&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- **Note:** 需要注意的是不建议代码中在顶层包进行任何声明，这在一些插件和库下可能出现问题。  （比如 kapt 可能不能正确处理注解，同时由于操作系统 locale 和字符编码问题，你无法在 IDEA 中看到可以理解的错误信息） --><p>最后就可以执行 <code>.\gradlew shadowjar</code> 来生成 fat-jar 了</p><p>这些项也可从 <code>shadowJar</code> 配置</p><p><strong>Note:</strong> 由于目前版本 <code>5.2.0</code> 尚未支持 Kotlin DSL, 如需访问 <code>shadowJar</code> 进行更详细的配置（如：<a href="https://imperceptiblethoughts.com/shadow/configuration/filtering/">过滤 jar 包中的内容</a>）<br>目前的 Workaround 如下： <a href="https://github.com/johnrengelman/shadow/issues/533#issue-541921197">&gt;&gt;</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> shadowJar: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar <span class="keyword">by</span> tasks</span><br></pre></td></tr></table></figure><p>更多的内容建议参考官方 User Guide: <a href="https://imperceptiblethoughts.com/shadow/">https://imperceptiblethoughts.com/shadow/</a></p><p>项目地址：<a href="https://github.com/johnrengelman/shadow">https://github.com/johnrengelman/shadow</a></p><p><strong>Note:</strong> 本文涉及的 Gradle 代码均为 Gradle Kotlin DSL ，视情况可能需要自行修改</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用-Gradle-Shadow-插件生成-Fat-Jar&quot;&gt;&lt;a href=&quot;#使用-Gradle-Shadow-插件生成-Fat-Jar&quot; class=&quot;headerlink&quot; title=&quot;使用 Gradle Shadow 插件生成 Fat-Jar&quot;&gt;&lt;/a</summary>
      
    
    
    
    
    <category term="kotlin" scheme="https://blog.iseki.space/tags/kotlin/"/>
    
    <category term="gradle" scheme="https://blog.iseki.space/tags/gradle/"/>
    
    <category term="jar" scheme="https://blog.iseki.space/tags/jar/"/>
    
  </entry>
  
  <entry>
    <title>我的 PGP Key</title>
    <link href="https://blog.iseki.space/2019/11/01/pgpkey/"/>
    <id>https://blog.iseki.space/2019/11/01/pgpkey/</id>
    <published>2019-11-01T13:00:00.000Z</published>
    <updated>2020-06-25T13:57:09.822Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我的-PGP-Key-又双叒叕更换了"><a href="#我的-PGP-Key-又双叒叕更换了" class="headerlink" title="我的 PGP Key 又双叒叕更换了"></a>我的 PGP Key 又双叒叕更换了</h1><p>iseki 总是不能妥善的保管自己的 key 呢</p><p>新 Key: <a href="https://peegeepee.com/A213EF73"><img src= "/img/loading.gif" data-lazy-src="https://peegeepee.com/badge/orange/A213EF73.svg" alt="PGP 0xA213EF73"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PGP PUBLIC KEY BLOCK-----</span><br><span class="line">Comment: 用户编号:iseki &lt;admin@iseki.space&gt;</span><br><span class="line">Comment: 连接时间:2020&#x2F;5&#x2F;12 16:32</span><br><span class="line">Comment: 过期时间:2024&#x2F;5&#x2F;11 16:32</span><br><span class="line">Comment: 文件系统:4096 位 RSA(绝密密钥可用)</span><br><span class="line">Comment: 用途:签名, 仅加密, 正在认证的用户编号</span><br><span class="line">Comment: 指纹:CE31AA9B872B869FC6C382F81A121A94A213EF73</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mQINBF66XycBEAC4QuiiL2FUqHBLTzstrzOi4hHtV2pCIM8K09vEjZbtt73d4reJ</span><br><span class="line">dH98r&#x2F;HVtgXd2ANfzJkkcnhlJTDLR1iL&#x2F;3Bu3IOujWEYDx5ULQtW&#x2F;aEFZdmY7cvQ</span><br><span class="line">wHUV1sJEEclQ4ymXS0oPfpnMVYIWru+&#x2F;cXkj5jvDuc1pUxwUW0Uwdq8VQ0JWJ8YN</span><br><span class="line">8WB92Kl6Qnxj5gJqLXKT&#x2F;uANru8Wbe&#x2F;0kDQSVy38E6g+7NilDpuMDuIsXBQXrjJR</span><br><span class="line">K9ymM5C6mDrfBIi6jSDrFEPw2nnioUPt5iTP3uvjIn+1tb1ZtX2cI9&#x2F;FMg3dTC0j</span><br><span class="line">FbR0upZz&#x2F;+2UMv9ynw3gXYI&#x2F;6tGvqNw0MLRH&#x2F;gZE80HJPdf60kRNj8cMVo29Yl65</span><br><span class="line">FFq&#x2F;tyepT&#x2F;4mkMPEBaoQVkopsGVju195zZwVu0xYKBEjnR7LSZFRaRxAUMgOf7Tq</span><br><span class="line">6DDHi&#x2F;q9OD2YCWfKdxcmxIvCexGR&#x2F;OeXQitbCxcwyM2&#x2F;jgExr&#x2F;fXAOVBpvAKvMUm</span><br><span class="line">uu0StGSyDCgA1yApIdKMhWVQEuRWpeZtXoEVFraeqIwemPWdGVZSdrh9j4HLhy6Z</span><br><span class="line">dCI7m+frkdXodeAvmYOSwG45RgvT1WxbXvpiMUCBLXflkj+ZhOLMeBZf63mPUGb1</span><br><span class="line">QAJVKY9WA6phq86bWO95B5x9yPwCrDJ&#x2F;WzKvLAEZ+ionDtOdAWGCVrWELwARAQAB</span><br><span class="line">tBlpc2VraSA8YWRtaW5AaXNla2kuc3BhY2U+iQJUBBMBCgA+FiEEzjGqm4crhp&#x2F;G</span><br><span class="line">w4L4GhIalKIT73MFAl66XycCGwMFCQeEzgAFCwkIBwIGFQoJCAsCBBYCAwECHgEC</span><br><span class="line">F4AACgkQGhIalKIT73OLUg&#x2F;+LAIScn&#x2F;PjTm65gPmNMuDQJea9YOjBThBA&#x2F;anJIZr</span><br><span class="line">4sDp7teowEeXMKjpwfiCdUoTligzUTkQ5VaWfmDWs7y8lT0ZkEf5pBEjNXBjKxvL</span><br><span class="line">nJ9hs6B52gRb+z8Cn31nYVDaQNbF7FyDOipNHObadV8y2PZoFUg6I67BufeZ8wyJ</span><br><span class="line">gbkdi7sYrJ&#x2F;G1n9OwvM5cSY329tXEGIsM0fei9te&#x2F;+dS8iemVN3E9jBjcCVfiod0</span><br><span class="line">WR19hqv+Up59OZR5qh7A5uJ&#x2F;qYQJBLZmU2FZ6xT8WtZQr3ehoMOenQ2QoXb9lFXv</span><br><span class="line">bIF&#x2F;9W6PD+YhWLgztBCpg57PGn30P2BTTghlgGTR+8+5CBbSGCrpbpzhH6LPHEiz</span><br><span class="line">LCUMotJYompYXQVZv2H2Zrj4zJLT29RmkZpuYIST5po6b4Jn&#x2F;3Fe+xh7PkHVdT+d</span><br><span class="line">s+NI2gD&#x2F;7Oq5+ldtk5cO8dAhVJinnauPzD7GZJfl8aU&#x2F;WXj4dfefvWGoadOnrmvb</span><br><span class="line">seKAMzYKlDlintELu1XekvVtDW+lX9b+iTrEZPgiXv5yFJ+UpZNEpfTX0PfUoX6F</span><br><span class="line">RjcSeRTpH9gY8fEd4vywcq8fdVOgDmAYR&#x2F;LpDb9UpgeSZMpp2mJPMOzcKMKFdDEM</span><br><span class="line">C0nuUty&#x2F;Us0oBuvhIfmxIHOPkhZ7Ob1&#x2F;95RKpvfOpMIrNPddZlLZiluHgWETRidk</span><br><span class="line">ggC5Ag0EXrpfJwEQAMlMVF2KCmB6+sbaerUVYke0SU&#x2F;woFa6VnAdnGZb8AdGq9AD</span><br><span class="line">KHzcWtYVPWdGPvTUbqbFZK61tTha19B3f&#x2F;lT9UodZJ1s4KIw19E67h3+ln51aj+2</span><br><span class="line">fboF5fElJ0uFvN5HL3nEs3P0y1y0Lma04t1&#x2F;YvnNWcGfwEKuTVWeXx&#x2F;KqOkoDnDU</span><br><span class="line">lPO18M3gsr2xC5wqGv+5UTC03F2Ga9DKQ+leQeliOYUZSetS4EjbqY5ZsrIItfNk</span><br><span class="line">naErLT7HRgqeCrg&#x2F;ZzfaiMbU76+WkvANl9A69AAZiQVjwc9Oo7z7u&#x2F;TLNDK&#x2F;Ufe3</span><br><span class="line">0oK&#x2F;J5h91PfkMkvIR+GW58oig7TTUOyIjJIQr+fZTIum93tvCe7eF+GHwMhd+2QY</span><br><span class="line">aLFAhNb+bbcvN7e33N80gQs7+L8915c5ULEng6ROmkl7DL5dfnCgF8vzNzy2Kxlz</span><br><span class="line">wRgeujRbhuS9sNQre0GGNNRHoLvAyCTMdeOnTvq8prxy9QvCO794vcN2Mklk7eLR</span><br><span class="line">Mev9Hs0p1v4PK7t4ObLoVZyLwhlSJJLyd3+X4GdPHH2Tpq7Kc53Fq5iovZxGb4w5</span><br><span class="line">NOYNUrt7TgRTWuA6vXmuI98GlLZ88VUDigL4yFXxiQlMcp8CDC8fz4tfAH5&#x2F;BlrI</span><br><span class="line">UYfmVVLUDeR7&#x2F;XGi3fE+ubvdg1czfxseOB&#x2F;SX+M9OglOA4Yl+SCeJ&#x2F;L2KvgTABEB</span><br><span class="line">AAGJAjwEGAEKACYWIQTOMaqbhyuGn8bDgvgaEhqUohPvcwUCXrpfJwIbDAUJB4TO</span><br><span class="line">AAAKCRAaEhqUohPvcwahEACOwzinVwP5WcgUtJ9pdnuMjdQZU0h1IWiDd3AAnShm</span><br><span class="line">ndy3Pmy6sa2tVga3Bw4FrVxlTYZ4vQv7efJ39ge5il2cA5S73TltwFdi5PiUzbWX</span><br><span class="line">EvUJcRlRjLbecSQFVB10BHSleVmCAKPsKjRGSww12Qd2WHn5d1pej902NpNQoCIh</span><br><span class="line">7v8hmv0q6RV20nmdllEUtKhVhDvahNOGZEYggTRSsV3pkmQ&#x2F;d75Aukdr+Uar0ahM</span><br><span class="line">Yn8XIt0pqkQgsZikEJDFqoS+O&#x2F;p3FDvvtUJEMFZc9UyBhZmWEuHQgKQ2Ndt4Nz&#x2F;9</span><br><span class="line">kaDZRJIXeoxkIkk447apiXukcp+DgKM6thG2rwQrL3dhC7w3q4nM32U&#x2F;2M54XFVP</span><br><span class="line">EzGj+Rbf14vLN2vadLYMTCvfbvdnA2cOnfN8Kts6G+UpFP1bEBW3CjORHidDL3Ks</span><br><span class="line">vY+3BQJFmQRyKNrbEZU3iWN9oEWjEUvinwNBJpasPEHz2ukadOo0ZTwmkSOv7wsP</span><br><span class="line">2L+kv7+XlgHMiEMl5Ll43K7NughYsrsy2bYJJQTV+8pFVbwovsm9ar0cbnzVuqpq</span><br><span class="line">GS8EfXaDVnBDmzL7qdSE0KUdhZT9QwQ+J&#x2F;YrjVpmswY3A+UXLsd4w0E8&#x2F;sxJtOWB</span><br><span class="line">3yIVxaB6ZXXnNI4ODr&#x2F;dl42WgstE2sMIqZQVK2OOltbLoOnLrrhqa9X9oHSzR211</span><br><span class="line">KQ&#x3D;&#x3D;</span><br><span class="line">&#x3D;oWua</span><br><span class="line">-----END PGP PUBLIC KEY BLOCK-----</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;我的-PGP-Key-又双叒叕更换了&quot;&gt;&lt;a href=&quot;#我的-PGP-Key-又双叒叕更换了&quot; class=&quot;headerlink&quot; title=&quot;我的 PGP Key 又双叒叕更换了&quot;&gt;&lt;/a&gt;我的 PGP Key 又双叒叕更换了&lt;/h1&gt;&lt;p&gt;iseki </summary>
      
    
    
    
    
    <category term="pgp" scheme="https://blog.iseki.space/tags/pgp/"/>
    
    <category term="openpgp" scheme="https://blog.iseki.space/tags/openpgp/"/>
    
    <category term="gpg" scheme="https://blog.iseki.space/tags/gpg/"/>
    
  </entry>
  
  <entry>
    <title>话说我大Kotlin怎么连个throttle都没有呢</title>
    <link href="https://blog.iseki.space/2019/10/23/kotlin-throttle/"/>
    <id>https://blog.iseki.space/2019/10/23/kotlin-throttle/</id>
    <published>2019-10-23T07:54:00.000Z</published>
    <updated>2020-06-25T13:57:09.822Z</updated>
    
    <content type="html"><![CDATA[<h1 id="throttle"><a href="#throttle" class="headerlink" title="throttle"></a>throttle</h1><p>既然没有，就自己写一个糊上去吧。<br>总之，这东西的功能就是给函数调用加一个冷却时间。</p><p>我这里的场景是，bot要根据接收到的消息来源判断自己是否被加入了未经授权的群组，如果出现了这种群组，就发出请求退群。<br>那么问题就来了，在发出的请求完成前bot可能接收到大量来自同一个群组的消息，为了避免发出一堆没用的请求，最简单的办法就是加一个冷却时间。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">throttle</span><span class="params">(threshhold: <span class="type">Long</span>, lambda: () -&gt; <span class="type">Unit</span>)</span></span> = run &#123;</span><br><span class="line">    <span class="keyword">var</span> last = <span class="number">0L</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">val</span> t = System.currentTimeMillis()</span><br><span class="line">        <span class="keyword">if</span> (t - last &gt; threshhold) &#123;</span><br><span class="line">            lambda.invoke()</span><br><span class="line">            last = t</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Unit-test"><a href="#Unit-test" class="headerlink" title="Unit test"></a>Unit test</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UtilKtTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">throttle</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">val</span> t = bot.throttle(<span class="number">200</span>) &#123;</span><br><span class="line">            count++</span><br><span class="line">        &#125;</span><br><span class="line">        repeat(<span class="number">8</span>) &#123; t.invoke() &#125;</span><br><span class="line">        assertEquals(count, <span class="number">1</span>)</span><br><span class="line">        Thread.sleep(<span class="number">500</span>)</span><br><span class="line">        repeat(<span class="number">4</span>) &#123; t.invoke() &#125;</span><br><span class="line">        assertEquals(count, <span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> fn = throttle(<span class="number">200</span>) &#123;</span><br><span class="line">    doSomething()</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">fn.todo() <span class="comment">//每次需要的时候调用下，如果距上次调用小于200ms，就什么也不会发生</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;throttle&quot;&gt;&lt;a href=&quot;#throttle&quot; class=&quot;headerlink&quot; title=&quot;throttle&quot;&gt;&lt;/a&gt;throttle&lt;/h1&gt;&lt;p&gt;既然没有，就自己写一个糊上去吧。&lt;br&gt;总之，这东西的功能就是给函数调用加一个冷却时间。&lt;/</summary>
      
    
    
    
    
    <category term="kotlin" scheme="https://blog.iseki.space/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>大佬们实在是太聚聚了，萌新咋活啊😐</title>
    <link href="https://blog.iseki.space/2019/10/18/dalao/"/>
    <id>https://blog.iseki.space/2019/10/18/dalao/</id>
    <published>2019-10-18T01:54:00.000Z</published>
    <updated>2020-06-25T13:57:09.820Z</updated>
    
    <content type="html"><![CDATA[<p>感觉自己完了呢…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;感觉自己完了呢…&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="dalao" scheme="https://blog.iseki.space/tags/dalao/"/>
    
  </entry>
  
  <entry>
    <title>这里是iseki的笔记本呢</title>
    <link href="https://blog.iseki.space/2019/10/17/hello/"/>
    <id>https://blog.iseki.space/2019/10/17/hello/</id>
    <published>2019-10-17T15:30:00.000Z</published>
    <updated>2020-06-25T13:57:09.821Z</updated>
    
    <content type="html"><![CDATA[<p>我也不会写什么blog，那么，这里就当作一个笔记本用吧，毕竟有些东西，好不容易搞明白，忘记了还是很麻烦的呢。<br>要是能借机会帮到其他人，我也是很高兴的呢。</p><p>这里用Hexo驱动，Github 托管 + Cloudflare CDN 外加一份开源的主题，自己凑凑合合写个Github Action workflow（其实没有也无所谓啊），就算差不多能用了。<br>首页的链接嘛，基本都点不开（x</p><p>那么，就先这样了，最后，忘了说一句，既然你来了，那说明咱俩有缘啊（x</p><p>总之，欢迎光临了）x</p><p>满口胡话的iseki</p><p>2019.10.17</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我也不会写什么blog，那么，这里就当作一个笔记本用吧，毕竟有些东西，好不容易搞明白，忘记了还是很麻烦的呢。&lt;br&gt;要是能借机会帮到其他人，我也是很高兴的呢。&lt;/p&gt;
&lt;p&gt;这里用Hexo驱动，Github 托管 + Cloudflare CDN 外加一份开源的主题，自己凑</summary>
      
    
    
    
    
    <category term="pin" scheme="https://blog.iseki.space/tags/pin/"/>
    
    <category term="text" scheme="https://blog.iseki.space/tags/text/"/>
    
  </entry>
  
  <entry>
    <title>在GitHub Action里设置 Hexo gen 的折腾笔记</title>
    <link href="https://blog.iseki.space/2019/10/17/github-action-hexo-gen/"/>
    <id>https://blog.iseki.space/2019/10/17/github-action-hexo-gen/</id>
    <published>2019-10-17T14:44:00.000Z</published>
    <updated>2020-06-25T13:57:09.821Z</updated>
    
    <content type="html"><![CDATA[<p>不想阅读Github Action厚重的文档，用预配置好的NPM Action折腾了半天，终以失败告终。由于不熟悉NPM和Node.js，最后爆出的错误摸不到头脑，就此作罢。</p><p>寻找另一个方法，在 <code>https://github.com/user/repo/actions/new</code> 中选择了跳过，自己设置一个空白的Workflow。</p><ol><li><p>为了避免Action重新推送仓库后循环触发Action（不知Github有没有对这种情况进行特殊处理）添加路径过滤器，仅当 <code>/source</code> 目录存在更新时才触发 Workflow</p></li><li><p>在仓库的 <code>Settings-&gt;Deploy keys</code> 里设置Github Action push时使用的SSH公钥，并赋予写权限，<code>Settings-&gt;Secrets</code> 里设置私钥的 Base64 编码。<br>私钥会通过环境变量传入Action的shell，<code>base64 -d</code> 即可解码，base64编码是为了避免潜在的回车换行符问题（环境变量里出现的换行符似乎不能正确地写入文件）</p></li><li><p>【未解决的疑问】 克隆git仓库后的所有操作最好写在一个step里，否则Git的工作目录可能莫名其妙的变空，猜测有可能是因为Step并不是严格的按顺序执行的？（这点没有仔细看文档所以不知道）总之写在一个Step里肯定就没问题了。</p></li><li><p><code>~/.ssh/id_rsa</code> 文件注意设定权限 <code>0600</code> 默认的权限过于宽松，SSH会不读取。</p></li><li><p><code>~/.ssh/config</code> 里需写入 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line">    StrictHostKeyChecking no</span><br></pre></td></tr></table></figure><p>否则可能会弹出要求确认SSH fingerprint的交互消息。</p></li><li><p>记得设定 <code>git config --global user.name/email</code> 否则无法提交</p></li><li><p>如果使用了自定义的域名，注意 <code>CNAME</code> 文件是否在 <code>hexo clean</code> 后被删除，可能需要自己写回去。</p></li><li><p>注意部分Hexo主题可能以 git submodule 方式引入， Github Action 克隆仓库时不会自动克隆子模块，导致生成的所有页面空白，Hexo只会给出警告而不是错误。</p></li></ol><h3 id="附上自己写的workflow（糊成一坨，凑合能用）"><a href="#附上自己写的workflow（糊成一坨，凑合能用）" class="headerlink" title="附上自己写的workflow（糊成一坨，凑合能用）"></a>附上自己写的workflow（糊成一坨，凑合能用）</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Generate</span> <span class="string">Hexo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span> </span><br><span class="line">    <span class="attr">paths:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;source/**&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span> </span><br><span class="line">  <span class="attr">build:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">Refresh</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Node.js</span> <span class="string">and</span> <span class="string">NPM</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">sudo</span> <span class="string">apt-get</span> <span class="string">install</span> <span class="string">curl</span> <span class="string">-y</span></span><br><span class="line">          <span class="string">curl</span> <span class="string">-sL</span> <span class="string">https://deb.nodesource.com/setup_12.x</span> <span class="string">|</span> <span class="string">sudo</span> <span class="string">-E</span> <span class="string">bash</span> <span class="bullet">-</span></span><br><span class="line">          <span class="string">sudo</span> <span class="string">apt-get</span> <span class="string">install</span> <span class="string">nodejs</span> <span class="string">-y</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&#x27;=====Show NPM version=====&#x27;</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">-v</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&#x27;=====Show Node.js version=====&#x27;</span></span><br><span class="line">          <span class="string">node</span> <span class="string">-v</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">sudo</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&#x27;=====Show HEXO version=====&#x27;</span></span><br><span class="line">          <span class="string">hexo</span> <span class="string">-v</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Prepare</span> <span class="string">Key</span> <span class="string">and</span> <span class="string">SSH</span> <span class="string">config</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">mkdir</span> <span class="string">~/.ssh</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">$DEPLOY_PRIVKEY</span> <span class="string">|</span> <span class="string">base64</span> <span class="string">-d</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">chmod</span> <span class="number">0600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&#x27;Host *&#x27;</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/config</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&#x27;    StrictHostKeyChecking no&#x27;</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/config</span></span><br><span class="line">          <span class="string">chmod</span> <span class="number">0600</span> <span class="string">~/.ssh/config</span></span><br><span class="line">        <span class="attr">env:</span> </span><br><span class="line">          <span class="attr">DEPLOY_PRIVKEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DEPLOY_PRIVKEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Clone</span> <span class="string">git</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">cd</span> <span class="string">~</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&#x27;=====Show work path=====&#x27;</span></span><br><span class="line">          <span class="string">pwd</span></span><br><span class="line">          <span class="string">git</span> <span class="string">clone</span> <span class="string">git@github.com:cpdyj/blog.git</span></span><br><span class="line">          <span class="string">cd</span> <span class="string">blog</span></span><br><span class="line">          <span class="string">ls</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&#x27;=====Show work path=====&#x27;</span></span><br><span class="line">          <span class="string">pwd</span></span><br><span class="line">          <span class="string">cat</span> <span class="string">./package.json</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">audit</span> <span class="string">fix</span></span><br><span class="line">          <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">          <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;blog.iseki.space&quot;</span> <span class="string">&gt;</span> <span class="string">./docs/CNAME</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;User name&quot;</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;Email@example.com&quot;</span></span><br><span class="line">          <span class="string">git</span> <span class="string">add</span> <span class="string">docs</span></span><br><span class="line">          <span class="string">git</span> <span class="string">commit</span> <span class="string">-am</span> <span class="string">&quot;Auto generate on Github Action at `date`&quot;</span></span><br><span class="line">          <span class="string">git</span> <span class="string">push</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;不想阅读Github Action厚重的文档，用预配置好的NPM Action折腾了半天，终以失败告终。由于不熟悉NPM和Node.js，最后爆出的错误摸不到头脑，就此作罢。&lt;/p&gt;
&lt;p&gt;寻找另一个方法，在 &lt;code&gt;https://github.com/user/re</summary>
      
    
    
    
    
    <category term="github" scheme="https://blog.iseki.space/tags/github/"/>
    
    <category term="action" scheme="https://blog.iseki.space/tags/action/"/>
    
    <category term="nodejs" scheme="https://blog.iseki.space/tags/nodejs/"/>
    
    <category term="npm" scheme="https://blog.iseki.space/tags/npm/"/>
    
    <category term="hexo" scheme="https://blog.iseki.space/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>关于Kotlin注解处理器的一些坑</title>
    <link href="https://blog.iseki.space/2019/10/14/kotlin-kapt-note/"/>
    <id>https://blog.iseki.space/2019/10/14/kotlin-kapt-note/</id>
    <published>2019-10-13T16:34:14.000Z</published>
    <updated>2020-06-25T13:57:09.821Z</updated>
    
    <content type="html"><![CDATA[<ol><li>kapt 1.3.5 存在bug，不能用，连同 kotlin-gradle-plugin 一同降级到 1.3.41</li><li><code>build.gradle.kts</code> 中 <code>dependencies</code> 需要同时使用 <code>implementation</code> 和 <code>kapt</code> 引用 <code>com.google.auto.service:auto-service</code> ，否则无法识别使用Kotlin编写的注解处理器<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies&#123;</span><br><span class="line">    implementation(<span class="string">&quot;com.google.auto.service:auto-service:<span class="variable">$googleAutoServiceVersion</span>&quot;</span>)</span><br><span class="line">    kapt(<span class="string">&quot;com.google.auto.service:auto-service:<span class="variable">$googleAutoServiceVersion</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>如果使用注解的类、函数签名、注解参数等包含顶级包声明的内容，javac可能出现找不到符号异常。不确定是不是bug。由于Windows下jdk可能使用中文locale，idea中Build中文报错可能显示成乱码，可以在Terminal中运行 <code>gradlew build</code> 查看错误原因（Terminal的文字编码是正确的）。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;kapt 1.3.5 存在bug，不能用，连同 kotlin-gradle-plugin 一同降级到 1.3.41&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build.gradle.kts&lt;/code&gt; 中 &lt;code&gt;dependencies&lt;/code&gt; 需要同时使用</summary>
      
    
    
    
    
    <category term="java" scheme="https://blog.iseki.space/tags/java/"/>
    
    <category term="kotlin" scheme="https://blog.iseki.space/tags/kotlin/"/>
    
    <category term="gradle" scheme="https://blog.iseki.space/tags/gradle/"/>
    
    <category term="kapt" scheme="https://blog.iseki.space/tags/kapt/"/>
    
    <category term="idea" scheme="https://blog.iseki.space/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>第一次用ANTLR呢</title>
    <link href="https://blog.iseki.space/2018/09/07/antlr-first/"/>
    <id>https://blog.iseki.space/2018/09/07/antlr-first/</id>
    <published>2018-09-07T14:29:00.000Z</published>
    <updated>2020-06-25T13:57:09.819Z</updated>
    
    <content type="html"><![CDATA[<p>觉得既然是第一次尝试ANTLR嘛，那就来个简单点的，parse Windows 的 hosts 文件吧，结果……</p><p>先上一段 grammar:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">grammar hosts;</span><br><span class="line"></span><br><span class="line">hostfile: line* EOF;</span><br><span class="line">line : item</span><br><span class="line">     | comment</span><br><span class="line">     ;</span><br><span class="line">item: IPADDRESS HOSTNAME ;</span><br><span class="line">comment: COMMENT;</span><br><span class="line">HOSTNAME: [A-z0-9.]+;</span><br><span class="line">IPADDRESS: NUM &#39;.&#39; NUM &#39;.&#39; NUM &#39;.&#39; NUM;</span><br><span class="line">NUM: [0-9] +;</span><br><span class="line">COMMENT: &#39;#&#39; .*? &#39;\r&#39;? &#39;\n&#39;;</span><br><span class="line">NL: (&#39;\r\n&#39;|&#39;\n\r&#39;|&#39;\r&#39;|&#39;\n&#39;) -&gt;skip;</span><br><span class="line">BLANK: (&#39; &#39;|&#39;\t&#39;) -&gt;skip;</span><br></pre></td></tr></table></figure><p>乍一看好像没什么问题，挺好的，然而<code>item</code>那条文法规则就是不起作用，前面注释都正常处理了，结果ip地址出不来。<br>网上搜了半天也搜不到，于是去StackOverflow上找了找，有个现成的。<br><a href="https://stackoverflow.com/questions/29777778/antlr-4-5-mismatched-input-x-expecting-x">StackOverflow: antlr-4-5-mismatched-input-x-expecting-x</a><br>解决办法就是把<code>IPADDRESS</code>挪到<code>HOSTNAME</code>上面就行了，原因是ANTLR生成的 parser 和 lexer 几乎是独立工作的，在不考虑内嵌动作的情况下parser不能影响lexer；lexer会简单的按照最长匹配的原则，一样长的就看grammar中出现的顺序。。。</p><p>所以之前那个文法把IP地址都匹配成了<code>HOSTNAME</code>…</p><p>问题解决，还是没好好看书，书上应该都写了的…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;觉得既然是第一次尝试ANTLR嘛，那就来个简单点的，parse Windows 的 hosts 文件吧，结果……&lt;/p&gt;
&lt;p&gt;先上一段 grammar:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g</summary>
      
    
    
    
    
    <category term="antlr" scheme="https://blog.iseki.space/tags/antlr/"/>
    
    <category term="java" scheme="https://blog.iseki.space/tags/java/"/>
    
  </entry>
  
</feed>
