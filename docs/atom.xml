<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>isekiのNote</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.iseki.space/"/>
  <updated>2020-02-22T06:32:01.801Z</updated>
  <id>https://blog.iseki.space/</id>
  
  <author>
    <name>iseki</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用 AC 自动机给汉字注上假名</title>
    <link href="https://blog.iseki.space/2020/02/22/aho-corasick-for-hanji-to-hiragana/"/>
    <id>https://blog.iseki.space/2020/02/22/aho-corasick-for-hanji-to-hiragana/</id>
    <published>2020-02-22T13:50:24.000Z</published>
    <updated>2020-02-22T06:32:01.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用-AC-自动机给汉字注上假名"><a href="#用-AC-自动机给汉字注上假名" class="headerlink" title="用 AC 自动机给汉字注上假名"></a>用 AC 自动机给汉字注上假名</h1><p>呐，本来想撸一个歌词站，觉得应该加上一个自动注音的功能，当然这个注音肯定是不精确的（一词多音现象太严重了），特殊地方就只能手动修改了。</p><p><a href="https://zh.wikipedia.org/wiki/AC%E8%87%AA%E5%8A%A8%E6%9C%BA%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">AC 自动机</a> 的构建并不是太复杂，理解其原理后并不难懂，这里就简单说一下，详细内容可以在 <a href="https://zh.wikipedia.org/wiki/AC%E8%87%AA%E5%8A%A8%E6%9C%BA%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">WikiPedia</a> 和 <a href="https://oi-wiki.org/string/ac-automaton/" target="_blank" rel="noopener">OI Wiki</a> 上找到。</p><p>简单来说：首先构建一个字典树，然后对每个节点添加一个失配指针（根节点的失配指针指向自己），使用时按照字典树的方式匹配字符，失配时按照失配指针回溯，直到找到一个能够匹配的节点（该节点包含待匹配的字符）；到达失配指针指向的节点的字符必然与到达当前节点的字符相同。</p><p>构建失配指针的方式非常简单，首先根节点的失配指针指向自己，然后从根节点开始对字典树进行 BFS 遍历，枚举每个节点的子节点，从当前节点向上回溯直到根节点，找到第一个同样包含指向该子节点字符的子节点，将失配指针指向它；如果没找到，就指向根节点。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建 fail 指针</span></span><br><span class="line">root.fail = root <span class="comment">// root 节点的 fail 指针指向自己</span></span><br><span class="line">root.bfs&#123; current -&gt; <span class="comment">// 从 root 节点开始做 BFS 遍历</span></span><br><span class="line">    current.childs.forEach&#123; char, node -&gt; <span class="comment">// 枚举每个节点的子节点</span></span><br><span class="line">        <span class="comment">// 从当前节点的 fail 指针开始向上回溯</span></span><br><span class="line">        <span class="comment">// 直到找到一个儿子节点中同样拥有该字符的节点</span></span><br><span class="line">        <span class="comment">// 如果没找到就指向 root</span></span><br><span class="line">        <span class="keyword">var</span> failTo = current.fail</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(failTo.hasChild(char))&#123;</span><br><span class="line">                failTo = failTo.childs[ch]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(failTo == root) <span class="keyword">break</span></span><br><span class="line">            failTo = failTo.fail</span><br><span class="line">        &#125;</span><br><span class="line">        node.fail = failTo</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匹配时每次都要检查 <strong>当前节点</strong> 以及 <strong>从当前节点的失配指针回溯到根途径的所有节点</strong> 是否是一个 word 的终结点，如果是就要考虑要不要加入到结果集中。</p><p>因为本文描述的是一个为汉字标注假名的工具，并非要求统计匹配次数的 OI 题目，并不需要保留所有结果，最长匹配原则即可。由于精确的搜索最佳方案的复杂度可能过高，也没必要，所以这里简单的用类似贪心的方式找到最长匹配即可。</p><p>（~ 待续</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用-AC-自动机给汉字注上假名&quot;&gt;&lt;a href=&quot;#用-AC-自动机给汉字注上假名&quot; class=&quot;headerlink&quot; title=&quot;用 AC 自动机给汉字注上假名&quot;&gt;&lt;/a&gt;用 AC 自动机给汉字注上假名&lt;/h1&gt;&lt;p&gt;呐，本来想撸一个歌词站，觉得应该加上
      
    
    </summary>
    
    
    
      <category term="Aho–Corasick" scheme="https://blog.iseki.space/tags/Aho%E2%80%93Corasick/"/>
    
      <category term="AC自动机" scheme="https://blog.iseki.space/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>使用 gradle 构建 Kotlin React 应用</title>
    <link href="https://blog.iseki.space/2020/01/10/about-kotlinjs-react/"/>
    <id>https://blog.iseki.space/2020/01/10/about-kotlinjs-react/</id>
    <published>2020-01-10T00:13:14.000Z</published>
    <updated>2020-02-22T06:32:01.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-gradle-构建-Kotlin-React-应用"><a href="#使用-gradle-构建-Kotlin-React-应用" class="headerlink" title="使用 gradle 构建 Kotlin React 应用"></a>使用 gradle 构建 Kotlin React 应用</h1><p>之前 JetBrain 官方提供了一个 <code>create-react-kotlin-app</code> 工具，这个东西可用来创建可使用 npm 构建的应用…现在社区似乎又打了一层包，切换到 gradle 了，但看起来底层还是极大的依赖 npm… （毕竟那一坨库还是要用的）…</p><p>似乎官方相关的文档还没有出来，那么这里就整理一点自己搜集到的东西。</p><h3 id="关于-build-gradle-kts"><a href="#关于-build-gradle-kts" class="headerlink" title="关于 build.gradle.kts"></a>关于 build.gradle.kts</h3><p>要引入的插件和依赖倒是不多(?)：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    <span class="comment">// 这里的版本最好和下方统一</span></span><br><span class="line">    id(<span class="string">"org.jetbrains.kotlin.js"</span>) version <span class="string">"1.3.60"</span></span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation(kotlin(<span class="string">"stdlib-js"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="React-相关依赖"><a href="#React-相关依赖" class="headerlink" title="React 相关依赖"></a>React 相关依赖</h3><p>要注意 npm 依赖不能在顶层的 dependencies 里引用，而是：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kotlin &#123;</span><br><span class="line">    sourceSets[<span class="string">"main"</span>].dependencies &#123;</span><br><span class="line">        <span class="comment">// 一定要引入 React 的一系列依赖</span></span><br><span class="line">        implementation(npm(<span class="string">"react"</span>, <span class="string">"16.9.0"</span>))</span><br><span class="line">        implementation(npm(<span class="string">"react-dom"</span>, <span class="string">"16.9.0"</span>))</span><br><span class="line">        implementation(npm(<span class="string">"core-js"</span>, <span class="string">"3.4.8"</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Maven 版的 Kotlin-React-Wrapper 依赖:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">"org.jetbrains:kotlin-react:16.9.0-pre.89-kotlin-1.3.60"</span>)</span><br><span class="line">implementation(<span class="string">"org.jetbrains:kotlin-react-dom:16.9.0-pre.89-kotlin-1.3.60"</span>)</span><br></pre></td></tr></table></figure><p>以上依赖并未发布在中央仓库，所以一定引入</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven(<span class="string">"https://dl.bintray.com/kotlin/kotlin-eap/"</span>)</span><br><span class="line">    maven(<span class="string">"https://dl.bintray.com/kotlin/kotlin-js-wrappers/"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可在如下地址找到版本信息等：</p><ul><li><a href="https://www.npmjs.com/package/@jetbrains/kotlin-react" target="_blank" rel="noopener">https://www.npmjs.com/package/@jetbrains/kotlin-react</a></li><li><a href="https://www.npmjs.com/package/@jetbrains/kotlin-react-dom" target="_blank" rel="noopener">https://www.npmjs.com/package/@jetbrains/kotlin-react-dom</a></li></ul><p>可使用 <code>gradlew run / gradlew browserRun</code> 拉起开发服务， <code>gradlew browserWebpack</code> 开始生产构建</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用-gradle-构建-Kotlin-React-应用&quot;&gt;&lt;a href=&quot;#使用-gradle-构建-Kotlin-React-应用&quot; class=&quot;headerlink&quot; title=&quot;使用 gradle 构建 Kotlin React 应用&quot;&gt;&lt;/a&gt;使用
      
    
    </summary>
    
    
    
      <category term="kotlin" scheme="https://blog.iseki.space/tags/kotlin/"/>
    
      <category term="react" scheme="https://blog.iseki.space/tags/react/"/>
    
      <category term="kotlin-js" scheme="https://blog.iseki.space/tags/kotlin-js/"/>
    
      <category term="js" scheme="https://blog.iseki.space/tags/js/"/>
    
      <category term="gradle" scheme="https://blog.iseki.space/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>使用 Gradle Shadow 插件生成 Fat-Jar</title>
    <link href="https://blog.iseki.space/2019/12/08/use-shadow-gradle-plugin-gen-fatjar/"/>
    <id>https://blog.iseki.space/2019/12/08/use-shadow-gradle-plugin-gen-fatjar/</id>
    <published>2019-12-08T18:27:59.000Z</published>
    <updated>2020-02-22T06:32:01.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-Gradle-Shadow-插件生成-Fat-Jar"><a href="#使用-Gradle-Shadow-插件生成-Fat-Jar" class="headerlink" title="使用 Gradle Shadow 插件生成 Fat-Jar"></a>使用 Gradle Shadow 插件生成 Fat-Jar</h1><p>在网络上找了好一阵子，最终发现了 <a href="https://github.com/johnrengelman/shadow" target="_blank" rel="noopener">Gradle Shadow</a> 这个插件，用起来很方便：</p><p>首先需要修改 gradle 的 <code>buildscript</code> 来引入这个依赖，这个东西 IDEA 默认生成的 Kotlin 项目没有，自己加进去:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        <span class="comment">// 这里目前的版本号是 5.2.0 ，对应 Gradle 版本 5.x ，较低的版本可能无法使用</span></span><br><span class="line">        classpath(<span class="string">"com.github.jengelman.gradle.plugins:shadow:5.2.0"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 <code>plugins</code> 中加入这个插件就行了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins&#123;</span><br><span class="line">    id(<span class="string">"com.github.johnrengelman.shadow"</span>) version <span class="string">"5.2.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了避免生成的 fat-jar 的 <code>META-INF/MANIFEST.MF</code> 中缺少 <code>Main-Class</code> 项，导致无法直接启动，建议在 <code>plugins</code> 中加入 <code>application</code>，并配置好相关属性 :</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins&#123;</span><br><span class="line">    application</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">application &#123;</span><br><span class="line">    mainClassName = <span class="string">"yours.MainKt"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- **Note:** 需要注意的是不建议代码中在顶层包进行任何声明，这在一些插件和库下可能出现问题。  （比如 kapt 可能不能正确处理注解，同时由于操作系统 locale 和字符编码问题，你无法在 IDEA 中看到可以理解的错误信息） --><p>最后就可以执行 <code>.\gradlew shadowjar</code> 来生成 fat-jar 了</p><p>这些项也可从 <code>shadowJar</code> 配置</p><p><strong>Note:</strong> 由于目前版本 <code>5.2.0</code> 尚未支持 Kotlin DSL, 如需访问 <code>shadowJar</code> 进行更详细的配置（如：<a href="https://imperceptiblethoughts.com/shadow/configuration/filtering/" target="_blank" rel="noopener">过滤 jar 包中的内容</a>）<br>目前的 Workaround 如下： <a href="https://github.com/johnrengelman/shadow/issues/533#issue-541921197" target="_blank" rel="noopener">&gt;&gt;</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> shadowJar: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar <span class="keyword">by</span> tasks</span><br></pre></td></tr></table></figure><p>更多的内容建议参考官方 User Guide: <a href="https://imperceptiblethoughts.com/shadow/" target="_blank" rel="noopener">https://imperceptiblethoughts.com/shadow/</a></p><p>项目地址：<a href="https://github.com/johnrengelman/shadow" target="_blank" rel="noopener">https://github.com/johnrengelman/shadow</a></p><p><strong>Note:</strong> 本文涉及的 Gradle 代码均为 Gradle Kotlin DSL ，视情况可能需要自行修改</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用-Gradle-Shadow-插件生成-Fat-Jar&quot;&gt;&lt;a href=&quot;#使用-Gradle-Shadow-插件生成-Fat-Jar&quot; class=&quot;headerlink&quot; title=&quot;使用 Gradle Shadow 插件生成 Fat-Jar&quot;&gt;&lt;/a
      
    
    </summary>
    
    
    
      <category term="kotlin" scheme="https://blog.iseki.space/tags/kotlin/"/>
    
      <category term="gradle" scheme="https://blog.iseki.space/tags/gradle/"/>
    
      <category term="jar" scheme="https://blog.iseki.space/tags/jar/"/>
    
  </entry>
  
  <entry>
    <title>我的 PGP Key</title>
    <link href="https://blog.iseki.space/2019/11/01/pgpkey/"/>
    <id>https://blog.iseki.space/2019/11/01/pgpkey/</id>
    <published>2019-11-01T21:00:00.000Z</published>
    <updated>2020-02-22T06:32:01.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我的-PGP-Key-更换了"><a href="#我的-PGP-Key-更换了" class="headerlink" title="我的 PGP Key 更换了"></a>我的 PGP Key 更换了</h1><p>因为一些意外，Key私钥无法访问，备份全部丢失，现在使用新 Key：</p><p><a href="https://peegeepee.com/06E036559B4FF61E6338F1EC8CC8C8A305E78F3C" target="_blank" rel="noopener">06E0 3655 9B4F F61E 6338 F1EC 8CC8 C8A3 05E7 8F3C</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PGP PUBLIC KEY BLOCK-----</span><br><span class="line">Comment: iseki &lt;admin@iseki.space&gt;</span><br><span class="line">Comment: 2019/11/1 21:16</span><br><span class="line">Comment: 4096 bit RSA</span><br><span class="line">Comment: fingerprint:06E036559B4FF61E6338F1EC8CC8C8A305E78F3C</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mQINBF28MBMBEACvmxf5PIRjJzXnLsxWlok0/EpJ4cJ/YAX5DH3kpl+YazEuyuI0</span><br><span class="line">DX6QrBBWU0awhJ1myk99E1OUQ/JU8IvsDMd90JpNpsQ0teeGCaMHD3Q1qrvJRJoQ</span><br><span class="line">suMkaKV4LwNabqS0mZAe5BvrX45KfWoKlOr3yySIehfdc6lpCRiItvCLpt35TkGy</span><br><span class="line">qmgQq5UACYs2fE7rx8gDV1xtwK+fCDwmZDTSXHybQ+hpYZt+etIjWH0MVOM2NiOR</span><br><span class="line">ovgaTW20SwI+n1NkcKEx5LYjd07tjila1bYVRLd0CUZyeQKV3I5aGZ2cp5qW6x40</span><br><span class="line">h4/h+gESe5QVgT1XbUacWS9DNvxS0skbMaaQF6IpfecSR6y/SpkCojC0VCs0G94O</span><br><span class="line">JnP8s0FnFLNN4sTozU4dKnpyDgDdv/U7rUSnLhTVpy9E3jhTyKd6qkUIbPlFj3D2</span><br><span class="line">BaOzTZ57EC252hXcyfIIvqS5Y64pFWWXDBdNdJZExpXwqKVpjjSsf731EZnvBdLZ</span><br><span class="line">O4wvCyUw7ku+ZjjrD1FxD0kae1lkC8VSMqYfr6q1k60m5OeaYpMui+4AnprUEgDP</span><br><span class="line">zUCU7CPxn+rrsykuCdzybt1/KRYnkB3aRSgTznvjfZ9c/lEAO+F7viOrK2vZ/8WL</span><br><span class="line">RceH1zj2FAjoNfY4OSR9uw7oeR7MOso2KhSpbQhfFFPzyXHF7/2jNAiihwARAQAB</span><br><span class="line">tBlpc2VraSA8YWRtaW5AaXNla2kuc3BhY2U+iQIwBBMBCgAaBAsJCAcCFQoCFgEC</span><br><span class="line">GQEFgl28MBMCngECmwEACgkQjMjIowXnjzwOXxAAjzaa4fZ0HvYxVBj2Ts5HXhwp</span><br><span class="line">KIOnT9T03qmystsl9bE5ID+yOq47r/+41BG5jUqN6f0vezglN7CkvTyrMnV5cCJ5</span><br><span class="line">TpPFAqXQ5o5kX+jRIiSuEUd+UpZzxt02Q9blM/IbeFOCizOrT2tXS8hTXQBqHQAq</span><br><span class="line">QmKChFyDOh/SgNtqPxjABMD/unxxlCFNbVAhJwPAGG+hjoTAqotOfGTElfR9w0Pj</span><br><span class="line">GHhYR6UDIbhErYq80MVadQSJCf+HH8Kse/28R1GGPVMFzi1mnIYI9gTkTsyVAycR</span><br><span class="line">Nm5qunDgiZ0nCb2cNHav2fa5KjPooftsiyM9bg0AK68iNX0neCenvKW91g/9VXfr</span><br><span class="line">YSQUDwMeHfr6IO7umVDIOLvU0RKkFgGvevqg+UaW3WyseRVx0dgsOlIsyh3RBCTn</span><br><span class="line">RbqOSOpxFihkywERgSxs8XL+yrG7xEs6ZeWl5JiXZePvWbzgIJsnOt/jdXioMQwZ</span><br><span class="line">3M4KthGQmmmP0U3jPEJJO5OqAilJ9kXeVll/LXjy66dtg+8/EnOMhhsNE3V1D/Yl</span><br><span class="line">UdKvjL/ZnsY4ytUd9C6/IyCLkSBO/18kc/70gMrs/XzRt/v8Ow/fduKT5xBJZ/4P</span><br><span class="line">tAaJn+vGGseLKegF0bNzwjXelRJfWtqAEvYG+mwFl8qG/mPHxylnmM546sDVuDy7</span><br><span class="line">tUG3nkcuZQVI6Z9txg25AY0EXbwwEwEMAKgm5GO3WOecEkJGPfzo1R4ncbMQSgK1</span><br><span class="line">mfJDkYK31NZB375cI/jqP9x/EgOkzLbc030uwke38Y3iOc5lMahk3z7N10ETFdOe</span><br><span class="line">kYQaQjwTZX05vG60nSlUSDryP03y1MBAKLh9knAKNiuGPcnyF1cqUPOTI9d86rkh</span><br><span class="line">aqPRrPHN+FK+0uSMTv3U6aluY/JrALCCYpsfs/KFh+Mkm23REtUhrcpR30yPnxGq</span><br><span class="line">l13scmBzsBNENkpoy5on0KQ0qAtq8G37nnzFC9xLo+3oYiaQ7PD4ezLw8dPRhcHZ</span><br><span class="line">i87rzbEqmz0qRQ7/0kETpl/AdgvrTFauSjF5J1OfdMsYFvzCY1uvtN9j+eFc8bBW</span><br><span class="line">IbdTACgsxiUt5nCe35xYpl1P4GZbu6ZyKTD7KLnw44ouVjgME/+L973XcX8np22D</span><br><span class="line">oedpz0qqzKl9o8ro7dQUMwjOyxpuXz6TWTaaX2WrV0L2/gLRlAdzM58Z2pFzxPJU</span><br><span class="line">b7mIXya+vtku9/tjF2o57kv7u6LhSDCTlwARAQABiQO+BBgBCgAJBYJdvDATApsC</span><br><span class="line">AakJEIzIyKMF5488wN2gBBkBCgAGBQJdvDATAAoJEE/NE1KAzVIwzjYMAJG5nxij</span><br><span class="line">EviS2WnmncxltfZV/1Zg5sE/Olk0IZEkoTvuCVS9degrJsvC2VMx+CdJo4MorLph</span><br><span class="line">x9Ih9BVqs3SY5wLpETO0bMUiMeg0RWMDP23cDdO9dMq/7PZm1+mCdkUlRXo5f5W9</span><br><span class="line">CSdH3CIpFhZdwwk1+iswJejGa4U+fwiFJQz3K/rrj3hcZAECOiTj6KOfhdj+4N7q</span><br><span class="line">BngpWTvfUMLwhIUd+LvKOZ8Qy6nt5sBY1YdNuhaY+vrJ0wqAHM323umtbXUQ+ot4</span><br><span class="line">yn6Of8CLYBzUxgX6C6NMTL2RwuzflHO7umnU4PpNpJWMRySsJ10CCrSYakveJsHg</span><br><span class="line">wS+wgxfYVkxD7stcR2peH0NlQWVl3a48u0KqPkvdV8qyANKy6TwtZ2TP0QaNMwjK</span><br><span class="line">pbQc2gcztypfEgUsVg1AWRw3BkpbzC3JBnPI/Qn9+pyhb4GHct97gq496LGUejaK</span><br><span class="line">P5COSQhF92X6uiaNc9LQGwF8N4itqYnKPzqnnMA87nAEi7sKMl2nDdfJjmN6D/97</span><br><span class="line">SftMx0cPEkq6mg25O17TfXRbbLO8AlTdmv8SVrGofT6cDc1EPH6b5Q3phmIy7mB9</span><br><span class="line">I4kraEzyCeNh4DH0+CaI+T2ToUxZp9F+xM+zU+h1TTbSsBFSYqr2KYH3wfxZ277/</span><br><span class="line">CV5wn0l54OeXOff1oT6p2aTvlyg72y026ulKTCjo00oRvz0kKnC+Pdjj9O+hiXwL</span><br><span class="line">MkGSzDltTAUbcnwRqGa3qLSlaegCcFYXTovk75VN8LH4Q0AmxDUF7xOsAFDSxaxM</span><br><span class="line">NiNEAGeeHTaK5UQ269IZYjCCP+IfGt8iSms6kvMWrbmSmNde+l8FMVK1I/ap4zEe</span><br><span class="line">XISpPboGrKYr4YBBdQ6OD+Xwh5cOZsITxrB/H87K6zTPBM/xfrYB80woAAdHiIEv</span><br><span class="line">Zz026iHNLsMVuSE5gMqK3AjmNfbXEncckFn0rpXNOd2HGHtQ3sO1i6C90tuWYROi</span><br><span class="line">xFgYRr2UzvCZNsFDxdW6+w4c9eDr7bZ+5p2koDqHMfWhQ6eVxJGL635cRNBaPCjQ</span><br><span class="line">ab9IafqTg4IA3dm9JtHNOr1mylcn1HixRGbjbdw0E8zgwb2i/j1vfzcMzhVYgcTq</span><br><span class="line">9pEhuBmmsUcDxXOa8fiSjJVLxhUrlhhPW2W3dTJMuCPlHqIX+j5NJN3VTGt3D+Bu</span><br><span class="line">gc1V8hK25MngyySI/6sAR5T4wcFmOMAKR2DKGRnJP4kCQQQoAQgAKxYhBAbgNlWb</span><br><span class="line">T/YeYzjx7IzIyKMF5488BQJdvTfeDR0DVXNlIG5ldyBrZXkACgkQjMjIowXnjzzU</span><br><span class="line">Xw//cWDxL4d8u7gZ1ODyN+Pu8cM9lbediQYVWcaZTQrLN5CkSWQHzxqJkDnUBUtz</span><br><span class="line">6x4qgLmsKT8EdlSoRuRqObOaWI4YpjNyctyuOd453B5y8hYQR0clVZB3xwYC5hYK</span><br><span class="line">yaS8Ygf5BJjSbyYU6u7Tsec6X8RvrXd4EKWuRBxrrqdz5nNzMO5+6RKfo9WydW6K</span><br><span class="line">GEXMotg+MCzUu6CPBq9ZENE9eCsLO6NHm3uDjCCorBwjaf7mxDH6WxMnAYJbowXG</span><br><span class="line">kxOZOXbnkqDE6G7gnYT9GNDKVslXYSQTovDlHrD2gJxI8aV0MVEAz6LCFstmTuHi</span><br><span class="line">EEyivT163g/L0cmyfdgr5LW5rG1trlWR0Eb55DNFBg0OsQD8HPKqNT/7PVrb4Ugu</span><br><span class="line">zqcFSDvcwn1VkWlfVaWg1gWBhNAAFbClRhpnWL11N/TaiWKeY/1kxvmXpLLakrmS</span><br><span class="line">flZnVmQKD613f8zq1aPcF97m0BAKZUL2yId6uCfk7OULWj0J3oDAjpSrLZ2IzJfs</span><br><span class="line">FZ4pMUwjxplT27mAS/bY79Gc9lcDuKto2OmAcRMC9MWf/0LcnX2kAhH3ZL5Rvy9i</span><br><span class="line">w2pnbJO3DTTzq8drsCsjUmx7ykes20BPmzZ8p5I//IVQqjG6ZV3PERSoUJyDSXww</span><br><span class="line">EoE/whjxSjj7JmHjlDsuatZGRrLO80c4k10Sp7Pr0/4MmLq5AY0EXbwwEwEMAN3I</span><br><span class="line">ef2m47coP/usqxXImkvAzVuwuRxpYsqkU2RdmaPmyjaVYKb0R8vHia2XF8Vn5L+j</span><br><span class="line">kY3Hx3f6XCkkU5rPp9JTUf5KB6tXFHLCd7lb9AP0yk7bPyMitcMwwed3tukmgbAX</span><br><span class="line">lp+f2+zhFHFDd9DQGXbgfcKZP443VhYCnL8C3z+0ZfVHTJANwtxgpOx8mvF8/Nic</span><br><span class="line">uXeIQJ7IUnnz/McZzwKdlpubCs4kYtH0MyxBlODlknPufBEaLdrkT5UrUUK1Dnvg</span><br><span class="line">du5Ck89UOFmspdPHCs93zFGHjRMAPaeNSBkNQEepIJSD7Vkx8KUNpRjD/cGNj9PH</span><br><span class="line">umwT39Rw+XYa0WOj7UMcOdDYNSHxSH615eOl7bf8YzKJm9gtU+waAmTlfbJCa6Uw</span><br><span class="line">uSyrDJdoA1pSjZsQpysfYq2z7q4adwpktJdgd7Jq5NurgI1O0X1BXLU07hpDVnm6</span><br><span class="line">9iJ9csBdogdyIU9ERmC35+u1P/S6/8TmHA8psNo7FkYo442kO0joxDmanh75jwAR</span><br><span class="line">AQABiQIfBBgBCgAJBYJdvDATApsMAAoJEIzIyKMF5488j0YP/3xCaqDL/Y+7JYDG</span><br><span class="line">7eDujChjHguYGv6v8JGtfPIBFgDATRfjnetd9q/7ZCgiwNAdhyc/DmzDdXMPKTDv</span><br><span class="line">k29Ftk6Wbsm/V53hY3vkl/Qw7rod9A3GkGqdUIrCQ1+uf4J/M86udua+gGfUnWxn</span><br><span class="line">rMXucbTnEGf1wtdJbC6g2fMIie/4jQFBu8WWPsX2CnZ4FuL0dSPUQ1zTXCZCPlrb</span><br><span class="line">RjC6eFWmKcmYWoteyd4f+dbZV2NR9QFwjvCtr/5/3KhfzXFMld3PjW2+odqMpd9u</span><br><span class="line">1nQyIe8Vj+ZdbXDJM3Dlp6fqc+OvLLOJ9qUAn2hOrv261c7MT5aDPVX/B61E+7Td</span><br><span class="line">XhvITMwSC8K1URUl1Ev33fyntG7GienuwE+Nq/jIawEh99RbmTIJAGhIxn2w/48b</span><br><span class="line">1BpOcPGJ0DuPcPV7RQX504f9DOX2k9M/f8mWXRqX9NcWRPKZPx5KspzwBpWQxhdh</span><br><span class="line">Yf9u3sqdLsTkEluX1gvG6aThCAgpFmy4X/uuymILaIRFcug82MtAuw3CK+bsoY2Y</span><br><span class="line">5wQ2pE840Be40w2XyFcsqVXYOX8CR8j2cw12zeMx29cqTooG7KU+Ylhz3r7YnKiJ</span><br><span class="line">h5FV0Zg5sGzFeCDA6gmuiUI7gWa47xfC6CH/9zvWoVfEN6T0tKoHksq8RXT8HsHU</span><br><span class="line">D1G3V5A5WzQ9d14tlkikMZYoxVPpiQJBBCgBCAArFiEEBuA2VZtP9h5jOPHsjMjI</span><br><span class="line">owXnjzwFAl29N+gNHQNVc2UgbmV3IGtleQAKCRCMyMijBeePPMYmD/4jdWCvZEBO</span><br><span class="line">u7axfs2ynjW4I34YhsrCiL6vyqkD4YApC/Qu9y6U3HFiF6Jyr16l5sQdjmvKuRH1</span><br><span class="line">GlMBl+jVhe0QG9YG1c+UGLA3D8/5AmGR2u1wbyO4byhFJSbUBMpUOrmywMbKjEe9</span><br><span class="line">uA1i5k871F/y6jEowe9T2p4mbwnKxl+OikWh+zUAi9SIn9RuJzC/1SMsCYN+julm</span><br><span class="line">P2oD+6c/FV8Yi7a7aCqP+cCcouPEEf9ikDoy40nrjH39JKaGhAerRxjA9eIxrFYi</span><br><span class="line">HuFdy/m3ZnILWTUbj4Gd3U+YDQjhtNK4U1MWxpZK2j3zywkDvqgE95FDfEO2E2cs</span><br><span class="line">JsXlGB9NhhyJGdecugJQMfgdyuJMYkFbtVx7H4p8i9+7pItVOlhH0/jAmJo+qts6</span><br><span class="line">JZ/Upro/jOKrctCRIoIvjvgzUMQhzCMAww8g09EpRbRsNiKIhgngaBHSYPV9kVHP</span><br><span class="line">6b0T8+9ZgwHEkZrKp85pay2iRhTUgM0HObom4x8x3iHf0f/zwqPLGCkf/QhFIu4A</span><br><span class="line">X2ouJiLVQkAKCCgCG4YfhYoh9tp3mYAH3FO2UZrV8j/Fi/Ey6qbz4mrrJBUFEP0X</span><br><span class="line">Ow8yR1tUJmVdhB/YgzE7mGfN8jm4DgIeIDmTnBw0KrVeePnoC7Nd3EthlsfyjA/8</span><br><span class="line">SuRcyQr5f5JE41kgqRwmecqxgkzoWAR6z7kBjQRdvT8BAQwAyn/iR4pMuQbPzWOc</span><br><span class="line">FNsdzCtmshEWgsw00ON5pReBy49a7EY+Z+tkIWd7vgiWe2wcfB5/r73xwTpigbTP</span><br><span class="line">NOYygAoI9kbfG6/7rInGKCBeJG8kTcHV/OP2nb/IhA0Lvin8EHCO5wgz9vfoq7Mj</span><br><span class="line">ujy0ZeAVEH5fA2PiEwIQALTJ+pGWw8Y/kRYswXXPPGkSEdDvtxcEGg0B0WN8Xcqc</span><br><span class="line">3s2KK9LtqBeSiFHXMQqKbtUqZUbQMmfMM5cSWw+d/y4CSpW49lNIDZJT/MNhgftS</span><br><span class="line">1ThN/hVh+MdqNWkzBjhR/WKPtHxL8IcYx9Uq3y5DRwhd4IcffD72ykVTnn0prKh2</span><br><span class="line">5sHel97jId5ZmM1ds71WW3hmuhwJIEVzfxlTwOW+/xIJVbfZe//tBMGUElUUB+Qb</span><br><span class="line">KDxZQABLiP/kH4l8KdDNsVM+nyVk1B+Ob7c3lU0AvsPkMsQidUiGw4UOnTeAdVYX</span><br><span class="line">IGXzoqK7CHF84mmWLhTHB09g+E5r1vjKEQFCepQ+PFdcEDCBABEBAAGJA8QEGAEK</span><br><span class="line">AA8Fgl29PwECmw4FiQPFen8BqQkQjMjIowXnjzzA3aAEGQEKAAYFAl29PwEACgkQ</span><br><span class="line">llFJHSrj98bIvwv/ZYXUhsSF09WzsfaLoqpoXfyqbsKqUYXWgObYiAcyB4980p0Y</span><br><span class="line">3KxC1mxT4lWcw5MPKNtTaUyt4ZdDGWy5YZ4Ytv0yCG0jvWo75lIYzN9o8wD1UmGT</span><br><span class="line">wRe9BFrRBeTul4Kca2x85qUr713Z7yu3NzQetCkmArleoFQ4oPM+D1yw+SGuwbjg</span><br><span class="line">rrpx31xi3bLfyt/q8kupf5Bld8gean4nE2fElu3BkJOjS5NF3JylYZk4dqNK4HVc</span><br><span class="line">zm5JAkfMI5KPgASWf5juf683e7ooBDH7xiJqFnin20T+qD1CRZH1joZa/3qgdSLE</span><br><span class="line">LeTJ3Wvk+60Ge7qep6VluLOpgz8Ypnl+3Rt71ESgDE27VuFAhsMaDmd1Ckq00V8x</span><br><span class="line">ZlzU1QubRgQPVh9kG95z/iy2Ymay2aMk5MqydpdJ703yyBeiXge73TCtxdm8bJfh</span><br><span class="line">gAxbz3snn/bTO1Dj4vCJPUStWVzU2MBKk8Q8DzcbB0TWTEeFlOm1yPS2087gXi4m</span><br><span class="line">yaM92cadCziCFrzo2+AP/0GxRsM6XriAcuM+U0Inx9f3nTuJ2Jy0TzHzf2Bh+dv4</span><br><span class="line">rtGwYc2PWOXX8d/gBQ3SPtEe7F0bvtFrBpWS0Q9Jsib8sPHwL+NQ2L3dFNe16N1C</span><br><span class="line">TAWIcIn0Qux7bnWF4kcULnJ//fOPxRKzV1pZVnoNaybtCIkrHKxylEfKK2jVEkZt</span><br><span class="line">NK3yMMeEwvzZCRndEbwCTiORqMp30aJZnjfaZDXh6jjgfz6KMMOX2oNwQgFVvX4Y</span><br><span class="line">FQPRtVXpMdzKenU87lSA7+z9M6IYmioVURiDULELU0dPi+qrzJsP38UjBljRvwIK</span><br><span class="line">aydmxm8ATm+BzkWQ2KXZxXTFDgr39zc6IfLbfyaJBnbNHip8IrlkmprIhE1lHyhO</span><br><span class="line">RpfrXB0mq9LQsI66E1zk2fbZBYjIwxayc5ETKf6Q/imqlb00d0pK1kU0xBfmNeIR</span><br><span class="line">t1tXZ4Mg5Fv9+NpZJEb9i/eOuBEAloOAUNQxraIXBC0S96XOFcHgTvL5xv3IOqGl</span><br><span class="line">tzJEx+rM6L8X5sgqkam4ghQd9P05XKQwFJBvTX7yjbP7wtaHU8vAPtuaSLA9jx7q</span><br><span class="line">sBfDnEeRQtFzJyWrBUsPpL0PrFi1jvmfqMC/WsPb7vZz1ZKYZK4BPIVU2V4JX9IE</span><br><span class="line">pMDGqdeS25F+29a4HtcMgg76jtNDiWePe8r02CG7B6B77YzvspFS4CLTBfNWRmLi</span><br><span class="line">uQENBF29P7wBCACtIwGNynR65M1oDiBe2SVFOAlTo5sGi03/YLxXzPg4V9ANis8D</span><br><span class="line">Fj7VDib988L9MYKrAhv0OyTMWPFr1lOQaBX+8Kze3k1AI0VewcyMXEiYp65k/IyM</span><br><span class="line">1ufGy5eHDshBop6SPgKaQ7ZC4S9+VqimuYiA9DsPTzsM5juIpfQ7cnTUx84NMT4D</span><br><span class="line">h3xjMa8SkFN4T5shjJSClGoLxZwgKqovmrpW7qwKWMV6j+ovJbRcb8qZkQEuDCXj</span><br><span class="line">PFxwmgzT23Q4m/MhfeDYayG6nTCEEK1jCSjc2k5fZPJr7/gGAWDH8Ykp8NGWcRj3</span><br><span class="line">jT0sAAFk4cfD/0O9z6kVd76bdhTxQAF1rnwnABEBAAGJAiUEGAEKAA8Fgl29P7wC</span><br><span class="line">myAFiQPFengACgkQjMjIowXnjzxpCQ//VGP2QrXajFXR8FxCcCk1OTObd0wStMf0</span><br><span class="line">QnVc8vEPmHF043WHTpw+z8BO6RMlFhWdzUtLPQIoIbTGrlnHzdRowCVPXUYM7oTY</span><br><span class="line">K/DqzyddeE/gkqdoXT2eDY54tQ6WX8S+aTCQw172ohKhAVF1ir2a4O4MgILUdzUw</span><br><span class="line">HmEmoiL1XFa4QW/51Qqf8sotAD/jg/ILodkJhHM8MAY2hDz8iRALb/uzlORIIm6S</span><br><span class="line">oLY8A4yAjx3AIps+RdH3ZxWrdptDZiNG4HDJG9tAitfIc+FK7BhEHxa9Ud87KzUH</span><br><span class="line">3pW2uIaM0OYzUO8DkHQYH/FvIAnFAstAeH1s2zqI970i8185bo08mRT+q0LAlmvN</span><br><span class="line">BqQKdD4saYM9k7rasvwfyTRfkkGXN2r9mNOtHWr2aE1FTGeOT+eo4J4bcuatYYKY</span><br><span class="line">dVIXNa05Ln8hRzntUm2NoEqFe8zaYHP98uA38IblwZ20ZAYLglyPVKnoQpWpgso7</span><br><span class="line">INBRnmggGqgpCvrGrf9rrCHHw4kpYrSEPekpv01VONM8j8Ai9RB5rArYBboMoohb</span><br><span class="line">NMtj010Tq4nM/imRJ0UYxNezsdaTyt7PVURfOTGuMG9wMMqHF7+PKcXsZLpBX9Y3</span><br><span class="line">xeBP0Dbaf8iwtYZLEmPz8FYb1cMFV9u/ykivmrbtAJElQlvMZPHDlb7bOEkisfve</span><br><span class="line">90GxAnrbmoE=</span><br><span class="line">=NfKy</span><br><span class="line">-----END PGP PUBLIC KEY BLOCK-----</span><br></pre></td></tr></table></figure><p>旧Key已经吊销，以下Key即起不再使用：</p><p>旧 PGP Key: <a href="https://peegeepee.com/39A9DA5A44E924722E832497398E78E8551D5860" target="_blank" rel="noopener">39A9 DA5A 44E9 2472 2E83 2497 398E 78E8 551D 5860</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;我的-PGP-Key-更换了&quot;&gt;&lt;a href=&quot;#我的-PGP-Key-更换了&quot; class=&quot;headerlink&quot; title=&quot;我的 PGP Key 更换了&quot;&gt;&lt;/a&gt;我的 PGP Key 更换了&lt;/h1&gt;&lt;p&gt;因为一些意外，Key私钥无法访问，备份全部丢
      
    
    </summary>
    
    
    
      <category term="pgp" scheme="https://blog.iseki.space/tags/pgp/"/>
    
      <category term="openpgp" scheme="https://blog.iseki.space/tags/openpgp/"/>
    
      <category term="gpg" scheme="https://blog.iseki.space/tags/gpg/"/>
    
  </entry>
  
  <entry>
    <title>话说我大Kotlin怎么连个throttle都没有呢</title>
    <link href="https://blog.iseki.space/2019/10/23/kotlin-throttle/"/>
    <id>https://blog.iseki.space/2019/10/23/kotlin-throttle/</id>
    <published>2019-10-23T15:54:00.000Z</published>
    <updated>2020-02-22T06:32:01.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="throttle"><a href="#throttle" class="headerlink" title="throttle"></a>throttle</h1><p>既然没有，就自己写一个糊上去吧。<br>总之，这东西的功能就是给函数调用加一个冷却时间。</p><p>我这里的场景是，bot要根据接收到的消息来源判断自己是否被加入了未经授权的群组，如果出现了这种群组，就发出请求退群。<br>那么问题就来了，在发出的请求完成前bot可能接收到大量来自同一个群组的消息，为了避免发出一堆没用的请求，最简单的办法就是加一个冷却时间。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">throttle</span><span class="params">(threshhold: <span class="type">Long</span>, lambda: () -&gt; <span class="type">Unit</span>)</span></span> = run &#123;</span><br><span class="line">    <span class="keyword">var</span> last = <span class="number">0L</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">val</span> t = System.currentTimeMillis()</span><br><span class="line">        <span class="keyword">if</span> (t - last &gt; threshhold) &#123;</span><br><span class="line">            lambda.invoke()</span><br><span class="line">            last = t</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Unit-test"><a href="#Unit-test" class="headerlink" title="Unit test"></a>Unit test</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UtilKtTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">throttle</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">val</span> t = bot.throttle(<span class="number">200</span>) &#123;</span><br><span class="line">            count++</span><br><span class="line">        &#125;</span><br><span class="line">        repeat(<span class="number">8</span>) &#123; t.invoke() &#125;</span><br><span class="line">        assertEquals(count, <span class="number">1</span>)</span><br><span class="line">        Thread.sleep(<span class="number">500</span>)</span><br><span class="line">        repeat(<span class="number">4</span>) &#123; t.invoke() &#125;</span><br><span class="line">        assertEquals(count, <span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> fn = throttle(<span class="number">200</span>) &#123;</span><br><span class="line">    doSomething()</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">fn.todo() <span class="comment">//每次需要的时候调用下，如果距上次调用小于200ms，就什么也不会发生</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;throttle&quot;&gt;&lt;a href=&quot;#throttle&quot; class=&quot;headerlink&quot; title=&quot;throttle&quot;&gt;&lt;/a&gt;throttle&lt;/h1&gt;&lt;p&gt;既然没有，就自己写一个糊上去吧。&lt;br&gt;总之，这东西的功能就是给函数调用加一个冷却时间。&lt;/
      
    
    </summary>
    
    
    
      <category term="kotlin" scheme="https://blog.iseki.space/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>大佬们实在是太聚聚了，萌新咋活啊😐</title>
    <link href="https://blog.iseki.space/2019/10/18/dalao/"/>
    <id>https://blog.iseki.space/2019/10/18/dalao/</id>
    <published>2019-10-18T09:54:00.000Z</published>
    <updated>2020-02-22T06:32:01.801Z</updated>
    
    <content type="html"><![CDATA[<p>感觉自己完了呢…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;感觉自己完了呢…&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="dalao" scheme="https://blog.iseki.space/tags/dalao/"/>
    
  </entry>
  
  <entry>
    <title>这里是iseki的笔记本呢</title>
    <link href="https://blog.iseki.space/2019/10/17/hello/"/>
    <id>https://blog.iseki.space/2019/10/17/hello/</id>
    <published>2019-10-17T23:30:00.000Z</published>
    <updated>2020-02-22T06:32:01.801Z</updated>
    
    <content type="html"><![CDATA[<p>我也不会写什么blog，那么，这里就当作一个笔记本用吧，毕竟有些东西，好不容易搞明白，忘记了还是很麻烦的呢。<br>要是能借机会帮到其他人，我也是很高兴的呢。</p><p>这里用Hexo驱动，Github 托管 + Cloudflare CDN 外加一份开源的主题，自己凑凑合合写个Github Action workflow（其实没有也无所谓啊），就算差不多能用了。<br>首页的链接嘛，基本都点不开（x</p><p>那么，就先这样了，最后，忘了说一句，既然你来了，那说明咱俩有缘啊（x</p><p>总之，欢迎光临了）x</p><p>满口胡话的iseki</p><p>2019.10.17</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我也不会写什么blog，那么，这里就当作一个笔记本用吧，毕竟有些东西，好不容易搞明白，忘记了还是很麻烦的呢。&lt;br&gt;要是能借机会帮到其他人，我也是很高兴的呢。&lt;/p&gt;
&lt;p&gt;这里用Hexo驱动，Github 托管 + Cloudflare CDN 外加一份开源的主题，自己凑
      
    
    </summary>
    
    
    
      <category term="pin" scheme="https://blog.iseki.space/tags/pin/"/>
    
      <category term="text" scheme="https://blog.iseki.space/tags/text/"/>
    
  </entry>
  
  <entry>
    <title>在GitHub Action里设置 Hexo gen 的折腾笔记</title>
    <link href="https://blog.iseki.space/2019/10/17/github-action-hexo-gen/"/>
    <id>https://blog.iseki.space/2019/10/17/github-action-hexo-gen/</id>
    <published>2019-10-17T22:44:00.000Z</published>
    <updated>2020-02-22T06:32:01.801Z</updated>
    
    <content type="html"><![CDATA[<p>不想阅读Github Action厚重的文档，用预配置好的NPM Action折腾了半天，终以失败告终。由于不熟悉NPM和Node.js，最后爆出的错误摸不到头脑，就此作罢。</p><p>寻找另一个方法，在 <code>https://github.com/user/repo/actions/new</code> 中选择了跳过，自己设置一个空白的Workflow。</p><ol><li><p>为了避免Action重新推送仓库后循环触发Action（不知Github有没有对这种情况进行特殊处理）添加路径过滤器，仅当 <code>/source</code> 目录存在更新时才触发 Workflow</p></li><li><p>在仓库的 <code>Settings-&gt;Deploy keys</code> 里设置Github Action push时使用的SSH公钥，并赋予写权限，<code>Settings-&gt;Secrets</code> 里设置私钥的 Base64 编码。<br>私钥会通过环境变量传入Action的shell，<code>base64 -d</code> 即可解码，base64编码是为了避免潜在的回车换行符问题（环境变量里出现的换行符似乎不能正确地写入文件）</p></li><li><p>【未解决的疑问】 克隆git仓库后的所有操作最好写在一个step里，否则Git的工作目录可能莫名其妙的变空，猜测有可能是因为Step并不是严格的按顺序执行的？（这点没有仔细看文档所以不知道）总之写在一个Step里肯定就没问题了。</p></li><li><p><code>~/.ssh/id_rsa</code> 文件注意设定权限 <code>0600</code> 默认的权限过于宽松，SSH会不读取。</p></li><li><p><code>~/.ssh/config</code> 里需写入 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line">    StrictHostKeyChecking no</span><br></pre></td></tr></table></figure></li></ol><p>否则可能会弹出要求确认SSH fingerprint的交互消息。</p><ol start="6"><li>记得设定 <code>git config --global user.name/email</code> 否则无法提交</li><li>如果使用了自定义的域名，注意 <code>CNAME</code> 文件是否在 <code>hexo clean</code> 后被删除，可能需要自己写回去。</li><li>注意部分Hexo主题可能以 git submodule 方式引入， Github Action 克隆仓库时不会自动克隆子模块，导致生成的所有页面空白，Hexo只会给出警告而不是错误。</li></ol><h3 id="附上自己写的workflow（糊成一坨，凑合能用）"><a href="#附上自己写的workflow（糊成一坨，凑合能用）" class="headerlink" title="附上自己写的workflow（糊成一坨，凑合能用）"></a>附上自己写的workflow（糊成一坨，凑合能用）</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Generate</span> <span class="string">Hexo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line"><span class="attr">  push:</span> </span><br><span class="line"><span class="attr">    paths:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">'source/**'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span> </span><br><span class="line"><span class="attr">  build:</span> </span><br><span class="line"><span class="attr">    name:</span> <span class="string">Refresh</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Install</span> <span class="string">Node.js</span> <span class="string">and</span> <span class="string">NPM</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          sudo apt-get install curl -y</span></span><br><span class="line"><span class="string">          curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -</span></span><br><span class="line"><span class="string">          sudo apt-get install nodejs -y</span></span><br><span class="line"><span class="string">          echo '=====Show NPM version====='</span></span><br><span class="line"><span class="string">          npm -v</span></span><br><span class="line"><span class="string">          echo '=====Show Node.js version====='</span></span><br><span class="line"><span class="string">          node -v</span></span><br><span class="line"><span class="string"></span><span class="attr">      - name:</span> <span class="string">Install</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          sudo npm install -g hexo-cli</span></span><br><span class="line"><span class="string">          echo '=====Show HEXO version====='</span></span><br><span class="line"><span class="string">          hexo -v</span></span><br><span class="line"><span class="string"></span><span class="attr">      - name:</span> <span class="string">Prepare</span> <span class="string">Key</span> <span class="string">and</span> <span class="string">SSH</span> <span class="string">config</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          mkdir ~/.ssh</span></span><br><span class="line"><span class="string">          echo $DEPLOY_PRIVKEY | base64 -d &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          chmod 0600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          echo 'Host *' &gt;&gt; ~/.ssh/config</span></span><br><span class="line"><span class="string">          echo '    StrictHostKeyChecking no' &gt;&gt; ~/.ssh/config</span></span><br><span class="line"><span class="string">          chmod 0600 ~/.ssh/config</span></span><br><span class="line"><span class="string"></span><span class="attr">        env:</span> </span><br><span class="line"><span class="attr">          DEPLOY_PRIVKEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DEPLOY_PRIVKEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Clone</span> <span class="string">git</span> <span class="string">repo</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          cd ~</span></span><br><span class="line"><span class="string">          echo '=====Show work path====='</span></span><br><span class="line"><span class="string">          pwd</span></span><br><span class="line"><span class="string">          git clone git@github.com:cpdyj/blog.git</span></span><br><span class="line"><span class="string">          cd blog</span></span><br><span class="line"><span class="string">          ls</span></span><br><span class="line"><span class="string">          echo '=====Show work path====='</span></span><br><span class="line"><span class="string">          pwd</span></span><br><span class="line"><span class="string">          cat ./package.json</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string">          npm audit fix</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          hexo g</span></span><br><span class="line"><span class="string">          echo "blog.iseki.space" &gt; ./docs/CNAME</span></span><br><span class="line"><span class="string">          git config --global user.name "User name"</span></span><br><span class="line"><span class="string">          git config --global user.email "Email@example.com"</span></span><br><span class="line"><span class="string">          git add docs</span></span><br><span class="line"><span class="string">          git commit -am "Auto generate on Github Action at `date`"</span></span><br><span class="line"><span class="string">          git push</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不想阅读Github Action厚重的文档，用预配置好的NPM Action折腾了半天，终以失败告终。由于不熟悉NPM和Node.js，最后爆出的错误摸不到头脑，就此作罢。&lt;/p&gt;
&lt;p&gt;寻找另一个方法，在 &lt;code&gt;https://github.com/user/re
      
    
    </summary>
    
    
    
      <category term="github" scheme="https://blog.iseki.space/tags/github/"/>
    
      <category term="action" scheme="https://blog.iseki.space/tags/action/"/>
    
      <category term="nodejs" scheme="https://blog.iseki.space/tags/nodejs/"/>
    
      <category term="npm" scheme="https://blog.iseki.space/tags/npm/"/>
    
      <category term="hexo" scheme="https://blog.iseki.space/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>关于Kotlin注解处理器的一些坑</title>
    <link href="https://blog.iseki.space/2019/10/14/kotlin-kapt-note/"/>
    <id>https://blog.iseki.space/2019/10/14/kotlin-kapt-note/</id>
    <published>2019-10-14T00:34:14.000Z</published>
    <updated>2020-02-22T06:32:01.801Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>kapt 1.3.5 存在bug，不能用，连同 kotlin-gradle-plugin 一同降级到 1.3.41</p></li><li><p><code>build.gradle.kts</code> 中 <code>dependencies</code> 需要同时使用 <code>implementation</code> 和 <code>kapt</code> 引用 <code>com.google.auto.service:auto-service</code> ，否则无法识别使用Kotlin编写的注解处理器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies&#123;</span><br><span class="line">    implementation(<span class="string">"com.google.auto.service:auto-service:<span class="variable">$googleAutoServiceVersion</span>"</span>)</span><br><span class="line">    kapt(<span class="string">"com.google.auto.service:auto-service:<span class="variable">$googleAutoServiceVersion</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果使用注解的类、函数签名、注解参数等包含顶级包声明的内容，javac可能出现找不到符号异常。不确定是不是bug。由于Windows下jdk可能使用中文locale，idea中Build中文报错可能显示成乱码，可以在Terminal中运行 <code>gradlew build</code> 查看错误原因（Terminal的文字编码是正确的）。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;kapt 1.3.5 存在bug，不能用，连同 kotlin-gradle-plugin 一同降级到 1.3.41&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;build.gradle.kts&lt;/code&gt; 中 &lt;code&gt;dependencies&lt;/c
      
    
    </summary>
    
    
    
      <category term="kotlin" scheme="https://blog.iseki.space/tags/kotlin/"/>
    
      <category term="gradle" scheme="https://blog.iseki.space/tags/gradle/"/>
    
      <category term="java" scheme="https://blog.iseki.space/tags/java/"/>
    
      <category term="kapt" scheme="https://blog.iseki.space/tags/kapt/"/>
    
      <category term="idea" scheme="https://blog.iseki.space/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>第一次用ANTLR呢</title>
    <link href="https://blog.iseki.space/2018/09/07/antlr-first/"/>
    <id>https://blog.iseki.space/2018/09/07/antlr-first/</id>
    <published>2018-09-07T22:29:00.000Z</published>
    <updated>2020-02-22T06:32:01.801Z</updated>
    
    <content type="html"><![CDATA[<p>觉得既然是第一次尝试ANTLR嘛，那就来个简单点的，parse Windows 的 hosts 文件吧，结果……</p><p>先上一段 grammar:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">grammar hosts;</span><br><span class="line"></span><br><span class="line">hostfile: line* EOF;</span><br><span class="line">line : item</span><br><span class="line">     | comment</span><br><span class="line">     ;</span><br><span class="line">item: IPADDRESS HOSTNAME ;</span><br><span class="line">comment: COMMENT;</span><br><span class="line">HOSTNAME: [A-z0-9.]+;</span><br><span class="line">IPADDRESS: NUM &apos;.&apos; NUM &apos;.&apos; NUM &apos;.&apos; NUM;</span><br><span class="line">NUM: [0-9] +;</span><br><span class="line">COMMENT: &apos;#&apos; .*? &apos;\r&apos;? &apos;\n&apos;;</span><br><span class="line">NL: (&apos;\r\n&apos;|&apos;\n\r&apos;|&apos;\r&apos;|&apos;\n&apos;) -&gt;skip;</span><br><span class="line">BLANK: (&apos; &apos;|&apos;\t&apos;) -&gt;skip;</span><br></pre></td></tr></table></figure><p>乍一看好像没什么问题，挺好的，然而<code>item</code>那条文法规则就是不起作用，前面注释都正常处理了，结果ip地址出不来。<br>网上搜了半天也搜不到，于是去StackOverflow上找了找，有个现成的。<br><a href="https://stackoverflow.com/questions/29777778/antlr-4-5-mismatched-input-x-expecting-x" target="_blank" rel="noopener">StackOverflow: antlr-4-5-mismatched-input-x-expecting-x</a><br>解决办法就是把<code>IPADDRESS</code>挪到<code>HOSTNAME</code>上面就行了，原因是ANTLR生成的 parser 和 lexer 几乎是独立工作的，在不考虑内嵌动作的情况下parser不能影响lexer；lexer会简单的按照最长匹配的原则，一样长的就看grammar中出现的顺序。。。</p><p>所以之前那个文法把IP地址都匹配成了<code>HOSTNAME</code>…</p><p>问题解决，还是没好好看书，书上应该都写了的…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;觉得既然是第一次尝试ANTLR嘛，那就来个简单点的，parse Windows 的 hosts 文件吧，结果……&lt;/p&gt;
&lt;p&gt;先上一段 grammar:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
    
    
      <category term="antlr" scheme="https://blog.iseki.space/tags/antlr/"/>
    
      <category term="java" scheme="https://blog.iseki.space/tags/java/"/>
    
  </entry>
  
</feed>
